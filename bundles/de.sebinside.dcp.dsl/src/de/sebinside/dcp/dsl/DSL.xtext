grammar de.sebinside.dcp.dsl.DSL with org.eclipse.xtext.common.Terminals

generate dSL "http://www.sebinside.de/dcp/dsl/DSL"

import "http://palladiosimulator.org/dataflow/diagram/characterized/1.0" as diagram
import "http://palladiosimulator.org/dataflow/dictionary/characterized/1.0" as dictionary
import "http://www.eclipse.org/emf/2002/Ecore"

Model:
	(elements+=AbstractElement)*;

AbstractElement:
	Include | CharacteristicType | GlobalConstantDefinition | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;

CharacteristicType:
	'type' name=ID ':' ref=[dictionary::EnumCharacteristicType|StringOrId];

StringOrId returns EString:
	ID | STRING
;

GlobalConstantDefinition:
	GlobalSetConstantDefinition | GlobalValueConstantDefinition
;

GlobalSetConstantDefinition:
	'const' variable=CharacteristicSet '=' (
		('['']') |
		(
			ref=[CharacteristicType] '.' 
			(
				('[' literals+=[dictionary::Literal] (',' literals+=[dictionary::Literal])* ']') |
				'*'
			)
		)
	);

GlobalValueConstantDefinition:
	'const' variable=CharacteristicVariable '=' ref=[CharacteristicType] '.' literals+=[dictionary::Literal];

CharacteristicClass:
	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';

CharacteristicTypeSelector:
	ref=[CharacteristicType] '.'
	(
		// Single literal, may be negated
		((negated?='!')? literals+=[dictionary::Literal]) |
		// Multiple literals, written as list
		('[' literals+=[dictionary::Literal] (',' literals+=[dictionary::Literal])*	']') |
		// Variable usage
		(isVariableSelector?="$") variable=CharacteristicVariableType
	);

CharacteristicVariableType:
	CharacteristicVariable | CharacteristicSet;

CharacteristicVariable:
	name=ID;

CharacteristicSet:
	name=ID "{}";

Include:
	'import' importURI=STRING;

Constraint:
	'constraint' name=ID '{' rule=Rule '}';

Rule:
	data=Data
	statement=Statement
	destination=Destination
	(from=Source)?
	(condition=Condition)?;

Data:
	(selectors+=AnySelector | (selectors+=SpecificDataSelector ('&' selectors+=SpecificDataSelector)*));

Destination:
	selectors+=NodeSelector ('&' selectors+=NodeSelector)*;

Source:
	'FROM' selectors+=NodeSelector ('&' selectors+=NodeSelector)*;

DataSelector:
	SpecificDataSelector | AnySelector;
	
SpecificDataSelector:
	AttributeSelector | AttributeClassSelector;

CharacteristicSelector:
	AttributeSelector | PropertySelector;

CharacteristicClassSelector:
	AttributeClassSelector | PropertyClassSelector;

AttributeSelector:
	'data' '.' ('attribute'|'property') '.' ref=CharacteristicTypeSelector;

AttributeClassSelector:
	'data' '.' 'class' '.' ref=[CharacteristicClass];

AnySelector:
	{AnySelector} 'data' '.' 'any';

NodeSelector:
	PropertySelector | PropertyClassSelector | NodeIdentitiySelector | NodeTypeSelector;

PropertySelector:
	'node' '.' 'property' '.' ref=CharacteristicTypeSelector;

PropertyClassSelector:
	'node' '.' 'class' '.' ref=[CharacteristicClass];

NodeIdentitiySelector:
	'node' '.' ('name' '.' name=STRING) | ('identity' '.' diaNode=[diagram::CharacterizedNode]);

NodeTypeSelector:
	'node' '.' 'type' '.' type=NodeType;

enum NodeType:
	ACTOR = 'Actor' | PROCESS = 'Process' | STORE = 'Store' | ACTORPROCESS = 'ActorProcess';

Statement:
	modality=StatementModality type=StatementType;

StatementType:
	name='FLOWS';

StatementModality:
	name='NEVER';

Condition:
	'WHERE' operation=BooleanOperation;

Reference:
	CharacteristicReference | CharacteristicSetReference;

CharacteristicReference:
	value=[CharacteristicVariable];

CharacteristicSetReference:
	value=[CharacteristicSet] | ref=CharacteristsicSetOperation;

Operation:
	BooleanOperation | CharacteristsicSetOperation | NumericOperation;

BooleanOperation:
	LogicalOrOperation;

CharacteristsicSetOperation:
	CreateSetOperation | IntersectionOperation | UnionOperation | SubtractOperation | ComplementOperation;

LogicalOrOperation returns BooleanOperation:
	LogicalAndOperation ({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*;

LogicalAndOperation returns BooleanOperation:
	LogicalNegationOperation ({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*;

LogicalNegationOperation returns BooleanOperation:
	EncapsulatedLogicalOperation | ({LogicalNegationOperation} '!' value=LogicalNegationOperation);

EncapsulatedLogicalOperation returns BooleanOperation:
	SimpleBooleanOperation |
	'(' LogicalOrOperation ')';

SimpleBooleanOperation:
	EmptySetOperation | VariableEqualityOperation | VariableInequalityOperation | LessThanOperation | GreaterThanOperation | ElementOfOperation | SubsetOperation;

VariableEqualityOperation:
	left=CharacteristicReference "==" right=CharacteristicReference;

VariableInequalityOperation:
	left=CharacteristicReference "!=" right=CharacteristicReference;

LessThanOperation:
	left=NumericOperation "<" right=NumericOperation;

GreaterThanOperation:
	left=NumericOperation ">" right=NumericOperation;

EmptySetOperation:
	"isEmpty" "(" value=CharacteristicSetReference ")";

SubsetOperation:
	"subset" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";

IntersectionOperation:
	"intersection" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";

UnionOperation:
	"union" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";

SubtractOperation:
	"subtract" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";

ElementOfOperation:
	"elementOf" "(" left=CharacteristicReference "," right=CharacteristicSetReference ")";

CreateSetOperation:
	"{" value=CharacteristicReference "}";

ComplementOperation:
	"complement" "[" types+=[CharacteristicType] (',' types+=[CharacteristicType])* "]" "(" value=CharacteristicSetReference ")";

NumericOperation:
	IndexOperation;

IndexOperation:
	'index' '(' value=CharacteristicReference ')';