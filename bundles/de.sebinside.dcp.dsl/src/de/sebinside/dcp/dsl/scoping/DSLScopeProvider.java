/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.scoping;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.CharacteristicType;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.EnumCharacteristicType;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.Enumeration;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.Literal;

import de.sebinside.dcp.dsl.dSL.CharacteristicTypeSelector;
import de.sebinside.dcp.dsl.dSL.DSLPackage;
import de.sebinside.dcp.dsl.dSL.GlobalConstantDefinition;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping on how and when
 * to use it.
 */
public class DSLScopeProvider extends AbstractDSLScopeProvider {
    
    @Override
    public IScope getScope(EObject context, EReference reference) {
        var superScope = super.getScope(context, reference);

        if (context instanceof CharacteristicTypeSelector
                && reference == DSLPackage.Literals.CHARACTERISTIC_TYPE_SELECTOR__LITERALS) {
            CharacteristicType characteristicType = ((CharacteristicTypeSelector) context).getRef()
                .getRef();
            return createScopeForLiteralsOfCharacteristicType(characteristicType).orElse(superScope);
        }

        if (context instanceof GlobalConstantDefinition
                && reference == DSLPackage.Literals.GLOBAL_CONSTANT_DEFINITION__LITERALS) {
            var definition = (GlobalConstantDefinition) context;
            var characteristicType = definition.getRef()
                .getRef();
            return createScopeForLiteralsOfCharacteristicType(characteristicType).orElse(superScope);
        }

        return super.getScope(context, reference);
    }

    protected Optional<IScope> createScopeForLiteralsOfCharacteristicType(CharacteristicType type) {
        if (!(type instanceof EnumCharacteristicType)) {
            return Optional.empty();
        }

        EnumCharacteristicType enumType = (EnumCharacteristicType) type;
        Enumeration literalEnumeration = enumType.getType();

        // This is the case if the characteristic type is invalid referenced
        if (literalEnumeration != null) {
            List<Literal> literals = literalEnumeration.getLiterals();

            IScope scope = Scopes.scopeFor(literals, literal -> QualifiedName.create(literal.getName()),
                    IScope.NULLSCOPE);

            return Optional.of(scope);
        }

        return Optional.empty();
    }
}
