/**
 * generated by Xtext 2.25.0
 */
package de.sebinside.dcp.dsl.dSL.util;

import de.sebinside.dcp.dsl.dSL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.sebinside.dcp.dsl.dSL.DSLPackage
 * @generated
 */
public class DSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DSLPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.TARGET_MODEL_TYPE_DEF:
      {
        TargetModelTypeDef targetModelTypeDef = (TargetModelTypeDef)theEObject;
        T result = caseTargetModelTypeDef(targetModelTypeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_TYPE:
      {
        CharacteristicType characteristicType = (CharacteristicType)theEObject;
        T result = caseCharacteristicType(characteristicType);
        if (result == null) result = caseAbstractElement(characteristicType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_CLASS:
      {
        CharacteristicClass characteristicClass = (CharacteristicClass)theEObject;
        T result = caseCharacteristicClass(characteristicClass);
        if (result == null) result = caseAbstractElement(characteristicClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_TYPE_SELECTOR:
      {
        CharacteristicTypeSelector characteristicTypeSelector = (CharacteristicTypeSelector)theEObject;
        T result = caseCharacteristicTypeSelector(characteristicTypeSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_VARIABLE_TYPE:
      {
        CharacteristicVariableType characteristicVariableType = (CharacteristicVariableType)theEObject;
        T result = caseCharacteristicVariableType(characteristicVariableType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_VARIABLE:
      {
        CharacteristicVariable characteristicVariable = (CharacteristicVariable)theEObject;
        T result = caseCharacteristicVariable(characteristicVariable);
        if (result == null) result = caseCharacteristicVariableType(characteristicVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_SET:
      {
        CharacteristicSet characteristicSet = (CharacteristicSet)theEObject;
        T result = caseCharacteristicSet(characteristicSet);
        if (result == null) result = caseCharacteristicVariableType(characteristicSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = caseAbstractElement(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = caseAbstractElement(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.DATA_SELECTOR:
      {
        DataSelector dataSelector = (DataSelector)theEObject;
        T result = caseDataSelector(dataSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_SELECTOR:
      {
        CharacteristicSelector characteristicSelector = (CharacteristicSelector)theEObject;
        T result = caseCharacteristicSelector(characteristicSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_CLASS_SELECTOR:
      {
        CharacteristicClassSelector characteristicClassSelector = (CharacteristicClassSelector)theEObject;
        T result = caseCharacteristicClassSelector(characteristicClassSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.ATTRIBUTE_SELECTOR:
      {
        AttributeSelector attributeSelector = (AttributeSelector)theEObject;
        T result = caseAttributeSelector(attributeSelector);
        if (result == null) result = caseDataSelector(attributeSelector);
        if (result == null) result = caseCharacteristicSelector(attributeSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.ATTRIBUTE_CLASS_SELECTOR:
      {
        AttributeClassSelector attributeClassSelector = (AttributeClassSelector)theEObject;
        T result = caseAttributeClassSelector(attributeClassSelector);
        if (result == null) result = caseDataSelector(attributeClassSelector);
        if (result == null) result = caseCharacteristicClassSelector(attributeClassSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.DESTINATION_SELECTOR:
      {
        DestinationSelector destinationSelector = (DestinationSelector)theEObject;
        T result = caseDestinationSelector(destinationSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.PROPERTY_SELECTOR:
      {
        PropertySelector propertySelector = (PropertySelector)theEObject;
        T result = casePropertySelector(propertySelector);
        if (result == null) result = caseCharacteristicSelector(propertySelector);
        if (result == null) result = caseDestinationSelector(propertySelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.PROPERTY_CLASS_SELECTOR:
      {
        PropertyClassSelector propertyClassSelector = (PropertyClassSelector)theEObject;
        T result = casePropertyClassSelector(propertyClassSelector);
        if (result == null) result = caseCharacteristicClassSelector(propertyClassSelector);
        if (result == null) result = caseDestinationSelector(propertyClassSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.NODE_IDENTITIY_SELECTOR:
      {
        NodeIdentitiySelector nodeIdentitiySelector = (NodeIdentitiySelector)theEObject;
        T result = caseNodeIdentitiySelector(nodeIdentitiySelector);
        if (result == null) result = caseDestinationSelector(nodeIdentitiySelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.STATEMENT_TYPE:
      {
        StatementType statementType = (StatementType)theEObject;
        T result = caseStatementType(statementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.STATEMENT_MODALITY:
      {
        StatementModality statementModality = (StatementModality)theEObject;
        T result = caseStatementModality(statementModality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_REFERENCE:
      {
        CharacteristicReference characteristicReference = (CharacteristicReference)theEObject;
        T result = caseCharacteristicReference(characteristicReference);
        if (result == null) result = caseReference(characteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTIC_SET_REFERENCE:
      {
        CharacteristicSetReference characteristicSetReference = (CharacteristicSetReference)theEObject;
        T result = caseCharacteristicSetReference(characteristicSetReference);
        if (result == null) result = caseReference(characteristicSetReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.BOOLEAN_OPERATION:
      {
        BooleanOperation booleanOperation = (BooleanOperation)theEObject;
        T result = caseBooleanOperation(booleanOperation);
        if (result == null) result = caseOperation(booleanOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CHARACTERISTSIC_SET_OPERATION:
      {
        CharacteristsicSetOperation characteristsicSetOperation = (CharacteristsicSetOperation)theEObject;
        T result = caseCharacteristsicSetOperation(characteristsicSetOperation);
        if (result == null) result = caseOperation(characteristsicSetOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.SIMPLE_BOOLEAN_OPERATION:
      {
        SimpleBooleanOperation simpleBooleanOperation = (SimpleBooleanOperation)theEObject;
        T result = caseSimpleBooleanOperation(simpleBooleanOperation);
        if (result == null) result = caseBooleanOperation(simpleBooleanOperation);
        if (result == null) result = caseOperation(simpleBooleanOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.VARIABLE_EQUALITY_OPERATION:
      {
        VariableEqualityOperation variableEqualityOperation = (VariableEqualityOperation)theEObject;
        T result = caseVariableEqualityOperation(variableEqualityOperation);
        if (result == null) result = caseSimpleBooleanOperation(variableEqualityOperation);
        if (result == null) result = caseBooleanOperation(variableEqualityOperation);
        if (result == null) result = caseOperation(variableEqualityOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.VARIABLE_INEQUALITY_OPERATION:
      {
        VariableInequalityOperation variableInequalityOperation = (VariableInequalityOperation)theEObject;
        T result = caseVariableInequalityOperation(variableInequalityOperation);
        if (result == null) result = caseSimpleBooleanOperation(variableInequalityOperation);
        if (result == null) result = caseBooleanOperation(variableInequalityOperation);
        if (result == null) result = caseOperation(variableInequalityOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.EMPTY_SET_OPERATION:
      {
        EmptySetOperation emptySetOperation = (EmptySetOperation)theEObject;
        T result = caseEmptySetOperation(emptySetOperation);
        if (result == null) result = caseSimpleBooleanOperation(emptySetOperation);
        if (result == null) result = caseBooleanOperation(emptySetOperation);
        if (result == null) result = caseOperation(emptySetOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.INTERSECTION_OPERATION:
      {
        IntersectionOperation intersectionOperation = (IntersectionOperation)theEObject;
        T result = caseIntersectionOperation(intersectionOperation);
        if (result == null) result = caseCharacteristsicSetOperation(intersectionOperation);
        if (result == null) result = caseOperation(intersectionOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.UNION_OPERATION:
      {
        UnionOperation unionOperation = (UnionOperation)theEObject;
        T result = caseUnionOperation(unionOperation);
        if (result == null) result = caseCharacteristsicSetOperation(unionOperation);
        if (result == null) result = caseOperation(unionOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.SUBTRACT_OPERATION:
      {
        SubtractOperation subtractOperation = (SubtractOperation)theEObject;
        T result = caseSubtractOperation(subtractOperation);
        if (result == null) result = caseCharacteristsicSetOperation(subtractOperation);
        if (result == null) result = caseOperation(subtractOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.ELEMENT_OF_OPERATION:
      {
        ElementOfOperation elementOfOperation = (ElementOfOperation)theEObject;
        T result = caseElementOfOperation(elementOfOperation);
        if (result == null) result = caseSimpleBooleanOperation(elementOfOperation);
        if (result == null) result = caseBooleanOperation(elementOfOperation);
        if (result == null) result = caseOperation(elementOfOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.CREATE_SET_OPERATION:
      {
        CreateSetOperation createSetOperation = (CreateSetOperation)theEObject;
        T result = caseCreateSetOperation(createSetOperation);
        if (result == null) result = caseCharacteristsicSetOperation(createSetOperation);
        if (result == null) result = caseOperation(createSetOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.LOGICAL_OR_OPERATION:
      {
        LogicalOrOperation logicalOrOperation = (LogicalOrOperation)theEObject;
        T result = caseLogicalOrOperation(logicalOrOperation);
        if (result == null) result = caseBooleanOperation(logicalOrOperation);
        if (result == null) result = caseOperation(logicalOrOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.LOGICAL_AND_OPERATION:
      {
        LogicalAndOperation logicalAndOperation = (LogicalAndOperation)theEObject;
        T result = caseLogicalAndOperation(logicalAndOperation);
        if (result == null) result = caseBooleanOperation(logicalAndOperation);
        if (result == null) result = caseOperation(logicalAndOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DSLPackage.LOGICAL_NEGATION_OPERATION:
      {
        LogicalNegationOperation logicalNegationOperation = (LogicalNegationOperation)theEObject;
        T result = caseLogicalNegationOperation(logicalNegationOperation);
        if (result == null) result = caseBooleanOperation(logicalNegationOperation);
        if (result == null) result = caseOperation(logicalNegationOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Target Model Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Target Model Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTargetModelTypeDef(TargetModelTypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicType(CharacteristicType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicClass(CharacteristicClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Type Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Type Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicTypeSelector(CharacteristicTypeSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Variable Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Variable Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicVariableType(CharacteristicVariableType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicVariable(CharacteristicVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicSet(CharacteristicSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSelector(DataSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicSelector(CharacteristicSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Class Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Class Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicClassSelector(CharacteristicClassSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeSelector(AttributeSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Class Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Class Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeClassSelector(AttributeClassSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Destination Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Destination Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDestinationSelector(DestinationSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertySelector(PropertySelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Class Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Class Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyClassSelector(PropertyClassSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Identitiy Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Identitiy Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeIdentitiySelector(NodeIdentitiySelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementType(StatementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Modality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Modality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementModality(StatementModality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicReference(CharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Set Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Set Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicSetReference(CharacteristicSetReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanOperation(BooleanOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristsic Set Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristsic Set Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristsicSetOperation(CharacteristsicSetOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Boolean Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Boolean Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleBooleanOperation(SimpleBooleanOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Equality Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Equality Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableEqualityOperation(VariableEqualityOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Inequality Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Inequality Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableInequalityOperation(VariableInequalityOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Empty Set Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Empty Set Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmptySetOperation(EmptySetOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Intersection Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Intersection Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntersectionOperation(IntersectionOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Union Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Union Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnionOperation(UnionOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subtract Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subtract Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubtractOperation(SubtractOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Of Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Of Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementOfOperation(ElementOfOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Set Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Set Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateSetOperation(CreateSetOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Or Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Or Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalOrOperation(LogicalOrOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical And Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical And Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAndOperation(LogicalAndOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Negation Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Negation Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalNegationOperation(LogicalNegationOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DSLSwitch
