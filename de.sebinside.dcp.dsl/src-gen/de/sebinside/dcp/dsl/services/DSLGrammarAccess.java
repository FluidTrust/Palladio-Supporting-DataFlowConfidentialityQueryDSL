/*
 * generated by Xtext 2.24.0
 */
package de.sebinside.dcp.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetModelTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0 = (RuleCall)cTargetModelTypeAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	targetModelType=TargetModelTypeDef?
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//targetModelType=TargetModelTypeDef?
		//elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//targetModelType=TargetModelTypeDef?
		public Assignment getTargetModelTypeAssignment_0() { return cTargetModelTypeAssignment_0; }
		
		//TargetModelTypeDef
		public RuleCall getTargetModelTypeTargetModelTypeDefParserRuleCall_0_0() { return cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class TargetModelTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.TargetModelTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTargetModelTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeContainerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypeContainerDataDictionaryCharacterizedCrossReference_2_1_0 = (CrossReference)cTypeContainerAssignment_2_1.eContents().get(0);
		private final RuleCall cTypeContainerDataDictionaryCharacterizedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTypeContainerDataDictionaryCharacterizedCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAllocationModelAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cAllocationModelAllocationCrossReference_2_2_1_0 = (CrossReference)cAllocationModelAssignment_2_2_1.eContents().get(0);
		private final RuleCall cAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cAllocationModelAllocationCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cUsageModelAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final CrossReference cUsageModelUsageModelCrossReference_2_2_3_0 = (CrossReference)cUsageModelAssignment_2_2_3.eContents().get(0);
		private final RuleCall cUsageModelUsageModelIDTerminalRuleCall_2_2_3_0_1 = (RuleCall)cUsageModelUsageModelCrossReference_2_2_3_0.eContents().get(1);
		
		//TargetModelTypeDef:
		//	'target' type=TargetModelType ('using' typeContainer=[dictionary::DataDictionaryCharacterized] (','
		//	allocationModel=[allocation::Allocation] ',' usageModel=[usagemodel::UsageModel])?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' type=TargetModelType ('using' typeContainer=[dictionary::DataDictionaryCharacterized] (','
		//allocationModel=[allocation::Allocation] ',' usageModel=[usagemodel::UsageModel])?)?
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//type=TargetModelType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TargetModelType
		public RuleCall getTypeTargetModelTypeEnumRuleCall_1_0() { return cTypeTargetModelTypeEnumRuleCall_1_0; }
		
		//('using' typeContainer=[dictionary::DataDictionaryCharacterized] (',' allocationModel=[allocation::Allocation] ','
		//usageModel=[usagemodel::UsageModel])?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'using'
		public Keyword getUsingKeyword_2_0() { return cUsingKeyword_2_0; }
		
		//typeContainer=[dictionary::DataDictionaryCharacterized]
		public Assignment getTypeContainerAssignment_2_1() { return cTypeContainerAssignment_2_1; }
		
		//[dictionary::DataDictionaryCharacterized]
		public CrossReference getTypeContainerDataDictionaryCharacterizedCrossReference_2_1_0() { return cTypeContainerDataDictionaryCharacterizedCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTypeContainerDataDictionaryCharacterizedIDTerminalRuleCall_2_1_0_1() { return cTypeContainerDataDictionaryCharacterizedIDTerminalRuleCall_2_1_0_1; }
		
		//(',' allocationModel=[allocation::Allocation] ',' usageModel=[usagemodel::UsageModel])?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//allocationModel=[allocation::Allocation]
		public Assignment getAllocationModelAssignment_2_2_1() { return cAllocationModelAssignment_2_2_1; }
		
		//[allocation::Allocation]
		public CrossReference getAllocationModelAllocationCrossReference_2_2_1_0() { return cAllocationModelAllocationCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1() { return cAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_2() { return cCommaKeyword_2_2_2; }
		
		//usageModel=[usagemodel::UsageModel]
		public Assignment getUsageModelAssignment_2_2_3() { return cUsageModelAssignment_2_2_3; }
		
		//[usagemodel::UsageModel]
		public CrossReference getUsageModelUsageModelCrossReference_2_2_3_0() { return cUsageModelUsageModelCrossReference_2_2_3_0; }
		
		//ID
		public RuleCall getUsageModelUsageModelIDTerminalRuleCall_2_2_3_0_1() { return cUsageModelUsageModelIDTerminalRuleCall_2_2_3_0_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharacteristicClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAbstractElementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//AbstractElement:
		//	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }
		
		//CharacteristicType
		public RuleCall getCharacteristicTypeParserRuleCall_1() { return cCharacteristicTypeParserRuleCall_1; }
		
		//CharacteristicClass
		public RuleCall getCharacteristicClassParserRuleCall_2() { return cCharacteristicClassParserRuleCall_2; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_3() { return cConstraintParserRuleCall_3; }
		
		//{AbstractElement} SL_COMMENT
		public Group getGroup_4() { return cGroup_4; }
		
		//{AbstractElement}
		public Action getAbstractElementAction_4_0() { return cAbstractElementAction_4_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_4_1() { return cSL_COMMENTTerminalRuleCall_4_1; }
	}
	public class CharacteristicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefCharacteristicTypeCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefCharacteristicTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cRefCharacteristicTypeCrossReference_3_0.eContents().get(1);
		
		//CharacteristicType:
		//	'type' name=ID ':' ref=[dictionary::CharacteristicType];
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID ':' ref=[dictionary::CharacteristicType]
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//ref=[dictionary::CharacteristicType]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//[dictionary::CharacteristicType]
		public CrossReference getRefCharacteristicTypeCrossReference_3_0() { return cRefCharacteristicTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getRefCharacteristicTypeIDTerminalRuleCall_3_0_1() { return cRefCharacteristicTypeIDTerminalRuleCall_3_0_1; }
	}
	public class CharacteristicClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersCharacteristicTypeSelectorParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersCharacteristicTypeSelectorParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CharacteristicClass:
		//	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members+=CharacteristicTypeSelector
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//CharacteristicTypeSelector
		public RuleCall getMembersCharacteristicTypeSelectorParserRuleCall_3_0() { return cMembersCharacteristicTypeSelectorParserRuleCall_3_0; }
		
		//(',' members+=CharacteristicTypeSelector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//members+=CharacteristicTypeSelector
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getMembersCharacteristicTypeSelectorParserRuleCall_4_1_0() { return cMembersCharacteristicTypeSelectorParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CharacteristicTypeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicTypeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefCharacteristicTypeCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefCharacteristicTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cRefCharacteristicTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNegatedAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0_0 = (Keyword)cNegatedAssignment_2_0_0.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cLiteralsLiteralCrossReference_2_0_1_0 = (CrossReference)cLiteralsAssignment_2_0_1.eContents().get(0);
		private final RuleCall cLiteralsLiteralIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cLiteralsLiteralCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cLiteralsLiteralCrossReference_2_1_1_0 = (CrossReference)cLiteralsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLiteralsLiteralIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLiteralsLiteralCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final CrossReference cLiteralsLiteralCrossReference_2_1_2_1_0 = (CrossReference)cLiteralsAssignment_2_1_2_1.eContents().get(0);
		private final RuleCall cLiteralsLiteralIDTerminalRuleCall_2_1_2_1_0_1 = (RuleCall)cLiteralsLiteralCrossReference_2_1_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cIsVariableSelectorAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Keyword cIsVariableSelectorDollarSignKeyword_2_2_0_0 = (Keyword)cIsVariableSelectorAssignment_2_2_0.eContents().get(0);
		private final Assignment cVariableAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariableCharacteristicVariableTypeParserRuleCall_2_2_1_0 = (RuleCall)cVariableAssignment_2_2_1.eContents().get(0);
		
		//CharacteristicTypeSelector:
		//	ref=[CharacteristicType] '.' (negated?='!'? literals+=[dictionary::Literal] | '[' literals+=[dictionary::Literal] (
		//	',' literals+=[dictionary::Literal])*
		//	']' | isVariableSelector?="$"variable=CharacteristicVariableType);
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[CharacteristicType] '.' (negated?='!'? literals+=[dictionary::Literal] | '[' literals+=[dictionary::Literal] (
		//',' literals+=[dictionary::Literal])*
		//']' | isVariableSelector?="$"variable=CharacteristicVariableType)
		public Group getGroup() { return cGroup; }
		
		//ref=[CharacteristicType]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[CharacteristicType]
		public CrossReference getRefCharacteristicTypeCrossReference_0_0() { return cRefCharacteristicTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getRefCharacteristicTypeIDTerminalRuleCall_0_0_1() { return cRefCharacteristicTypeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(negated?='!'? literals+=[dictionary::Literal] | '[' literals+=[dictionary::Literal] (','
		//literals+=[dictionary::Literal])*
		//']' | isVariableSelector?="$"variable=CharacteristicVariableType)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//negated?='!'? literals+=[dictionary::Literal]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0_0() { return cNegatedAssignment_2_0_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0_0() { return cNegatedExclamationMarkKeyword_2_0_0_0; }
		
		//literals+=[dictionary::Literal]
		public Assignment getLiteralsAssignment_2_0_1() { return cLiteralsAssignment_2_0_1; }
		
		//[dictionary::Literal]
		public CrossReference getLiteralsLiteralCrossReference_2_0_1_0() { return cLiteralsLiteralCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getLiteralsLiteralIDTerminalRuleCall_2_0_1_0_1() { return cLiteralsLiteralIDTerminalRuleCall_2_0_1_0_1; }
		
		//// Multiple literals, written as list
		//'[' literals+=[dictionary::Literal] (',' literals+=[dictionary::Literal])*
		//']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//literals+=[dictionary::Literal]
		public Assignment getLiteralsAssignment_2_1_1() { return cLiteralsAssignment_2_1_1; }
		
		//[dictionary::Literal]
		public CrossReference getLiteralsLiteralCrossReference_2_1_1_0() { return cLiteralsLiteralCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getLiteralsLiteralIDTerminalRuleCall_2_1_1_0_1() { return cLiteralsLiteralIDTerminalRuleCall_2_1_1_0_1; }
		
		//(',' literals+=[dictionary::Literal])*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//literals+=[dictionary::Literal]
		public Assignment getLiteralsAssignment_2_1_2_1() { return cLiteralsAssignment_2_1_2_1; }
		
		//[dictionary::Literal]
		public CrossReference getLiteralsLiteralCrossReference_2_1_2_1_0() { return cLiteralsLiteralCrossReference_2_1_2_1_0; }
		
		//ID
		public RuleCall getLiteralsLiteralIDTerminalRuleCall_2_1_2_1_0_1() { return cLiteralsLiteralIDTerminalRuleCall_2_1_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
		
		//// Variable usage
		//	isVariableSelector?="$"variable=CharacteristicVariableType
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//// Variable usage
		//	isVariableSelector?="$"
		public Assignment getIsVariableSelectorAssignment_2_2_0() { return cIsVariableSelectorAssignment_2_2_0; }
		
		//"$"
		public Keyword getIsVariableSelectorDollarSignKeyword_2_2_0_0() { return cIsVariableSelectorDollarSignKeyword_2_2_0_0; }
		
		//variable=CharacteristicVariableType
		public Assignment getVariableAssignment_2_2_1() { return cVariableAssignment_2_2_1; }
		
		//CharacteristicVariableType
		public RuleCall getVariableCharacteristicVariableTypeParserRuleCall_2_2_1_0() { return cVariableCharacteristicVariableTypeParserRuleCall_2_2_1_0; }
	}
	public class CharacteristicVariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacteristicVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharacteristicVariableType:
		//	CharacteristicVariable | CharacteristicSet;
		@Override public ParserRule getRule() { return rule; }
		
		//CharacteristicVariable | CharacteristicSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CharacteristicVariable
		public RuleCall getCharacteristicVariableParserRuleCall_0() { return cCharacteristicVariableParserRuleCall_0; }
		
		//CharacteristicSet
		public RuleCall getCharacteristicSetParserRuleCall_1() { return cCharacteristicSetParserRuleCall_1; }
	}
	public class CharacteristicVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CharacteristicVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CharacteristicSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CharacteristicSet:
		//	name=ID "{}";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "{}"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"{}"
		public Keyword getLeftCurlyBracketRightCurlyBracketKeyword_1() { return cLeftCurlyBracketRightCurlyBracketKeyword_1; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Include:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	'constraint' name=ID '{' rule=Rule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID '{' rule=Rule '}'
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rule=Rule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_0() { return cRuleRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataSelectorsDataSelectorParserRuleCall_0_0 = (RuleCall)cDataSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDataSelectorsDataSelectorParserRuleCall_1_1_0 = (RuleCall)cDataSelectorsAssignment_1_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Assignment cDestinationSelectorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestinationSelectorsDestinationSelectorParserRuleCall_3_0 = (RuleCall)cDestinationSelectorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAmpersandKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationSelectorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0 = (RuleCall)cDestinationSelectorsAssignment_4_1.eContents().get(0);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		
		//Rule:
		//	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
		//	statement=Statement
		//	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
		//	condition=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
		//statement=Statement
		//destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
		//condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//dataSelectors+=DataSelector
		public Assignment getDataSelectorsAssignment_0() { return cDataSelectorsAssignment_0; }
		
		//DataSelector
		public RuleCall getDataSelectorsDataSelectorParserRuleCall_0_0() { return cDataSelectorsDataSelectorParserRuleCall_0_0; }
		
		//('&' dataSelectors+=DataSelector)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }
		
		//dataSelectors+=DataSelector
		public Assignment getDataSelectorsAssignment_1_1() { return cDataSelectorsAssignment_1_1; }
		
		//DataSelector
		public RuleCall getDataSelectorsDataSelectorParserRuleCall_1_1_0() { return cDataSelectorsDataSelectorParserRuleCall_1_1_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//destinationSelectors+=DestinationSelector
		public Assignment getDestinationSelectorsAssignment_3() { return cDestinationSelectorsAssignment_3; }
		
		//DestinationSelector
		public RuleCall getDestinationSelectorsDestinationSelectorParserRuleCall_3_0() { return cDestinationSelectorsDestinationSelectorParserRuleCall_3_0; }
		
		//('&' destinationSelectors+=DestinationSelector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_4_0() { return cAmpersandKeyword_4_0; }
		
		//destinationSelectors+=DestinationSelector
		public Assignment getDestinationSelectorsAssignment_4_1() { return cDestinationSelectorsAssignment_4_1; }
		
		//DestinationSelector
		public RuleCall getDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0() { return cDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_0() { return cConditionConditionParserRuleCall_5_0; }
	}
	public class DataSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.DataSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataSelector:
		//	AttributeSelector | AttributeClassSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeSelector | AttributeClassSelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_0() { return cAttributeSelectorParserRuleCall_0; }
		
		//AttributeClassSelector
		public RuleCall getAttributeClassSelectorParserRuleCall_1() { return cAttributeClassSelectorParserRuleCall_1; }
	}
	public class CharacteristicSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertySelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharacteristicSelector:
		//	AttributeSelector | PropertySelector;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeSelector | PropertySelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_0() { return cAttributeSelectorParserRuleCall_0; }
		
		//PropertySelector
		public RuleCall getPropertySelectorParserRuleCall_1() { return cPropertySelectorParserRuleCall_1; }
	}
	public class CharacteristicClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicClassSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeClassSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharacteristicClassSelector:
		//	AttributeClassSelector | PropertyClassSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeClassSelector | PropertyClassSelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeClassSelector
		public RuleCall getAttributeClassSelectorParserRuleCall_0() { return cAttributeClassSelectorParserRuleCall_0; }
		
		//PropertyClassSelector
		public RuleCall getPropertyClassSelectorParserRuleCall_1() { return cPropertyClassSelectorParserRuleCall_1; }
	}
	public class AttributeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AttributeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefCharacteristicTypeSelectorParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//AttributeSelector:
		//	'data.attribute.' ref=CharacteristicTypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//'data.attribute.' ref=CharacteristicTypeSelector
		public Group getGroup() { return cGroup; }
		
		//'data.attribute.'
		public Keyword getDataAttributeKeyword_0() { return cDataAttributeKeyword_0; }
		
		//ref=CharacteristicTypeSelector
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getRefCharacteristicTypeSelectorParserRuleCall_1_0() { return cRefCharacteristicTypeSelectorParserRuleCall_1_0; }
	}
	public class AttributeClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AttributeClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCharacteristicClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCharacteristicClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCharacteristicClassCrossReference_1_0.eContents().get(1);
		
		//AttributeClassSelector:
		//	'data.class.' ref=[CharacteristicClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'data.class.' ref=[CharacteristicClass]
		public Group getGroup() { return cGroup; }
		
		//'data.class.'
		public Keyword getDataClassKeyword_0() { return cDataClassKeyword_0; }
		
		//ref=[CharacteristicClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[CharacteristicClass]
		public CrossReference getRefCharacteristicClassCrossReference_1_0() { return cRefCharacteristicClassCrossReference_1_0; }
		
		//ID
		public RuleCall getRefCharacteristicClassIDTerminalRuleCall_1_0_1() { return cRefCharacteristicClassIDTerminalRuleCall_1_0_1; }
	}
	public class DestinationSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.DestinationSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertySelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeIdentitiySelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DestinationSelector:
		//	PropertySelector | PropertyClassSelector | NodeIdentitiySelector;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertySelector | PropertyClassSelector | NodeIdentitiySelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertySelector
		public RuleCall getPropertySelectorParserRuleCall_0() { return cPropertySelectorParserRuleCall_0; }
		
		//PropertyClassSelector
		public RuleCall getPropertyClassSelectorParserRuleCall_1() { return cPropertyClassSelectorParserRuleCall_1; }
		
		//NodeIdentitiySelector
		public RuleCall getNodeIdentitiySelectorParserRuleCall_2() { return cNodeIdentitiySelectorParserRuleCall_2; }
	}
	public class PropertySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.PropertySelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodePropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefCharacteristicTypeSelectorParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//PropertySelector:
		//	'node.property.' ref=CharacteristicTypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//'node.property.' ref=CharacteristicTypeSelector
		public Group getGroup() { return cGroup; }
		
		//'node.property.'
		public Keyword getNodePropertyKeyword_0() { return cNodePropertyKeyword_0; }
		
		//ref=CharacteristicTypeSelector
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getRefCharacteristicTypeSelectorParserRuleCall_1_0() { return cRefCharacteristicTypeSelectorParserRuleCall_1_0; }
	}
	public class PropertyClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.PropertyClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCharacteristicClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCharacteristicClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCharacteristicClassCrossReference_1_0.eContents().get(1);
		
		//PropertyClassSelector:
		//	'node.class.' ref=[CharacteristicClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'node.class.' ref=[CharacteristicClass]
		public Group getGroup() { return cGroup; }
		
		//'node.class.'
		public Keyword getNodeClassKeyword_0() { return cNodeClassKeyword_0; }
		
		//ref=[CharacteristicClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[CharacteristicClass]
		public CrossReference getRefCharacteristicClassCrossReference_1_0() { return cRefCharacteristicClassCrossReference_1_0; }
		
		//ID
		public RuleCall getRefCharacteristicClassIDTerminalRuleCall_1_0_1() { return cRefCharacteristicClassIDTerminalRuleCall_1_0_1; }
	}
	public class NodeIdentitiySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.NodeIdentitiySelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNodeNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNodeIdentityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cAssemblyAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final CrossReference cAssemblyAssemblyContextCrossReference_1_1_0_0_0 = (CrossReference)cAssemblyAssignment_1_1_0_0.eContents().get(0);
		private final RuleCall cAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_0_0_1 = (RuleCall)cAssemblyAssemblyContextCrossReference_1_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cComponentAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final CrossReference cComponentBasicComponentCrossReference_1_1_0_2_0 = (CrossReference)cComponentAssignment_1_1_0_2.eContents().get(0);
		private final RuleCall cComponentBasicComponentIDTerminalRuleCall_1_1_0_2_0_1 = (RuleCall)cComponentBasicComponentCrossReference_1_1_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Assignment cSeffAssignment_1_1_0_4 = (Assignment)cGroup_1_1_0.eContents().get(4);
		private final CrossReference cSeffServiceEffectSpecificationCrossReference_1_1_0_4_0 = (CrossReference)cSeffAssignment_1_1_0_4.eContents().get(0);
		private final RuleCall cSeffServiceEffectSpecificationIDTerminalRuleCall_1_1_0_4_0_1 = (RuleCall)cSeffServiceEffectSpecificationCrossReference_1_1_0_4_0.eContents().get(1);
		private final Assignment cDiaNodeAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final CrossReference cDiaNodeCharacterizedNodeCrossReference_1_1_1_0 = (CrossReference)cDiaNodeAssignment_1_1_1.eContents().get(0);
		private final RuleCall cDiaNodeCharacterizedNodeIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cDiaNodeCharacterizedNodeCrossReference_1_1_1_0.eContents().get(1);
		
		//NodeIdentitiySelector:
		//	'node.name.' name=STRING | 'node.identity.' (assembly=[composition::AssemblyContext] '.'
		//	component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification] |
		//	diaNode=[diagram::CharacterizedNode]);
		@Override public ParserRule getRule() { return rule; }
		
		//'node.name.' name=STRING | 'node.identity.' (assembly=[composition::AssemblyContext] '.'
		//component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification] |
		//diaNode=[diagram::CharacterizedNode])
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'node.name.' name=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'node.name.'
		public Keyword getNodeNameKeyword_0_0() { return cNodeNameKeyword_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_0() { return cNameSTRINGTerminalRuleCall_0_1_0; }
		
		//'node.identity.' (assembly=[composition::AssemblyContext] '.'
		//component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification] |
		//diaNode=[diagram::CharacterizedNode])
		public Group getGroup_1() { return cGroup_1; }
		
		//'node.identity.'
		public Keyword getNodeIdentityKeyword_1_0() { return cNodeIdentityKeyword_1_0; }
		
		//(assembly=[composition::AssemblyContext] '.'
		//component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification] |
		//diaNode=[diagram::CharacterizedNode])
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//assembly=[composition::AssemblyContext] '.'
		//component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification]
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//assembly=[composition::AssemblyContext]
		public Assignment getAssemblyAssignment_1_1_0_0() { return cAssemblyAssignment_1_1_0_0; }
		
		//[composition::AssemblyContext]
		public CrossReference getAssemblyAssemblyContextCrossReference_1_1_0_0_0() { return cAssemblyAssemblyContextCrossReference_1_1_0_0_0; }
		
		//ID
		public RuleCall getAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_0_0_1() { return cAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_1() { return cFullStopKeyword_1_1_0_1; }
		
		//component=[repository::BasicComponent]
		public Assignment getComponentAssignment_1_1_0_2() { return cComponentAssignment_1_1_0_2; }
		
		//[repository::BasicComponent]
		public CrossReference getComponentBasicComponentCrossReference_1_1_0_2_0() { return cComponentBasicComponentCrossReference_1_1_0_2_0; }
		
		//ID
		public RuleCall getComponentBasicComponentIDTerminalRuleCall_1_1_0_2_0_1() { return cComponentBasicComponentIDTerminalRuleCall_1_1_0_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_3() { return cFullStopKeyword_1_1_0_3; }
		
		//seff=[seff::ServiceEffectSpecification]
		public Assignment getSeffAssignment_1_1_0_4() { return cSeffAssignment_1_1_0_4; }
		
		//[seff::ServiceEffectSpecification]
		public CrossReference getSeffServiceEffectSpecificationCrossReference_1_1_0_4_0() { return cSeffServiceEffectSpecificationCrossReference_1_1_0_4_0; }
		
		//ID
		public RuleCall getSeffServiceEffectSpecificationIDTerminalRuleCall_1_1_0_4_0_1() { return cSeffServiceEffectSpecificationIDTerminalRuleCall_1_1_0_4_0_1; }
		
		//diaNode=[diagram::CharacterizedNode]
		public Assignment getDiaNodeAssignment_1_1_1() { return cDiaNodeAssignment_1_1_1; }
		
		//[diagram::CharacterizedNode]
		public CrossReference getDiaNodeCharacterizedNodeCrossReference_1_1_1_0() { return cDiaNodeCharacterizedNodeCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getDiaNodeCharacterizedNodeIDTerminalRuleCall_1_1_1_0_1() { return cDiaNodeCharacterizedNodeIDTerminalRuleCall_1_1_1_0_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModalityStatementModalityParserRuleCall_0_0 = (RuleCall)cModalityAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStatementTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Statement:
		//	modality=StatementModality type=StatementType;
		@Override public ParserRule getRule() { return rule; }
		
		//modality=StatementModality type=StatementType
		public Group getGroup() { return cGroup; }
		
		//modality=StatementModality
		public Assignment getModalityAssignment_0() { return cModalityAssignment_0; }
		
		//StatementModality
		public RuleCall getModalityStatementModalityParserRuleCall_0_0() { return cModalityStatementModalityParserRuleCall_0_0; }
		
		//type=StatementType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//StatementType
		public RuleCall getTypeStatementTypeParserRuleCall_1_0() { return cTypeStatementTypeParserRuleCall_1_0; }
	}
	public class StatementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.StatementType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameFLOWSKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//StatementType:
		//	name='FLOWS';
		@Override public ParserRule getRule() { return rule; }
		
		//name='FLOWS'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'FLOWS'
		public Keyword getNameFLOWSKeyword_0() { return cNameFLOWSKeyword_0; }
	}
	public class StatementModalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.StatementModality");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameNEVERKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//StatementModality:
		//	name='NEVER';
		@Override public ParserRule getRule() { return rule; }
		
		//name='NEVER'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'NEVER'
		public Keyword getNameNEVERKeyword_0() { return cNameNEVERKeyword_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationBooleanOperationParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		
		//Condition:
		//	'WHERE' operation=BooleanOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' operation=BooleanOperation
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//operation=BooleanOperation
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//BooleanOperation
		public RuleCall getOperationBooleanOperationParserRuleCall_1_0() { return cOperationBooleanOperationParserRuleCall_1_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacteristicReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicSetReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Reference:
		//	CharacteristicReference | CharacteristicSetReference;
		@Override public ParserRule getRule() { return rule; }
		
		//CharacteristicReference | CharacteristicSetReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CharacteristicReference
		public RuleCall getCharacteristicReferenceParserRuleCall_0() { return cCharacteristicReferenceParserRuleCall_0; }
		
		//CharacteristicSetReference
		public RuleCall getCharacteristicSetReferenceParserRuleCall_1() { return cCharacteristicSetReferenceParserRuleCall_1; }
	}
	public class CharacteristicReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicReference");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueCharacteristicVariableCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueCharacteristicVariableIDTerminalRuleCall_0_1 = (RuleCall)cValueCharacteristicVariableCrossReference_0.eContents().get(1);
		
		//CharacteristicReference:
		//	value=[CharacteristicVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[CharacteristicVariable]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[CharacteristicVariable]
		public CrossReference getValueCharacteristicVariableCrossReference_0() { return cValueCharacteristicVariableCrossReference_0; }
		
		//ID
		public RuleCall getValueCharacteristicVariableIDTerminalRuleCall_0_1() { return cValueCharacteristicVariableIDTerminalRuleCall_0_1; }
	}
	public class CharacteristicSetReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicSetReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueCharacteristicSetCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueCharacteristicSetIDTerminalRuleCall_0_0_1 = (RuleCall)cValueCharacteristicSetCrossReference_0_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRefCharacteristsicSetOperationParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//CharacteristicSetReference:
		//	value=[CharacteristicSet] | ref=CharacteristsicSetOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[CharacteristicSet] | ref=CharacteristsicSetOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=[CharacteristicSet]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[CharacteristicSet]
		public CrossReference getValueCharacteristicSetCrossReference_0_0() { return cValueCharacteristicSetCrossReference_0_0; }
		
		//ID
		public RuleCall getValueCharacteristicSetIDTerminalRuleCall_0_0_1() { return cValueCharacteristicSetIDTerminalRuleCall_0_0_1; }
		
		//ref=CharacteristsicSetOperation
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristsicSetOperation
		public RuleCall getRefCharacteristsicSetOperationParserRuleCall_1_0() { return cRefCharacteristsicSetOperationParserRuleCall_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristsicSetOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation:
		//	BooleanOperation | CharacteristsicSetOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOperation | CharacteristsicSetOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanOperation
		public RuleCall getBooleanOperationParserRuleCall_0() { return cBooleanOperationParserRuleCall_0; }
		
		//CharacteristsicSetOperation
		public RuleCall getCharacteristsicSetOperationParserRuleCall_1() { return cCharacteristsicSetOperationParserRuleCall_1; }
	}
	public class BooleanOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.BooleanOperation");
		private final RuleCall cLogicalOrOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanOperation:
		//	LogicalOrOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrOperation
		public RuleCall getLogicalOrOperationParserRuleCall() { return cLogicalOrOperationParserRuleCall; }
	}
	public class CharacteristsicSetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristsicSetOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateSetOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntersectionOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubtractOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CharacteristsicSetOperation:
		//	CreateSetOperation | IntersectionOperation | UnionOperation | SubtractOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateSetOperation | IntersectionOperation | UnionOperation | SubtractOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateSetOperation
		public RuleCall getCreateSetOperationParserRuleCall_0() { return cCreateSetOperationParserRuleCall_0; }
		
		//IntersectionOperation
		public RuleCall getIntersectionOperationParserRuleCall_1() { return cIntersectionOperationParserRuleCall_1; }
		
		//UnionOperation
		public RuleCall getUnionOperationParserRuleCall_2() { return cUnionOperationParserRuleCall_2; }
		
		//SubtractOperation
		public RuleCall getSubtractOperationParserRuleCall_3() { return cSubtractOperationParserRuleCall_3; }
	}
	public class LogicalOrOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.LogicalOrOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOrOperation BooleanOperation:
		//	LogicalAndOperation ({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndOperation ({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndOperation
		public RuleCall getLogicalAndOperationParserRuleCall_0() { return cLogicalAndOperationParserRuleCall_0; }
		
		//({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOrOperation.left=current}
		public Action getLogicalOrOperationLeftAction_1_0() { return cLogicalOrOperationLeftAction_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=LogicalAndOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalAndOperation
		public RuleCall getRightLogicalAndOperationParserRuleCall_1_2_0() { return cRightLogicalAndOperationParserRuleCall_1_2_0; }
	}
	public class LogicalAndOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.LogicalAndOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNegationOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalNegationOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAndOperation BooleanOperation:
		//	LogicalNegationOperation ({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalNegationOperation ({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*
		public Group getGroup() { return cGroup; }
		
		//LogicalNegationOperation
		public RuleCall getLogicalNegationOperationParserRuleCall_0() { return cLogicalNegationOperationParserRuleCall_0; }
		
		//({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalAndOperation.left=current}
		public Action getLogicalAndOperationLeftAction_1_0() { return cLogicalAndOperationLeftAction_1_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=LogicalNegationOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalNegationOperation
		public RuleCall getRightLogicalNegationOperationParserRuleCall_1_2_0() { return cRightLogicalNegationOperationParserRuleCall_1_2_0; }
	}
	public class LogicalNegationOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.LogicalNegationOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEncapsulatedLogicalOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNegationOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueEncapsulatedLogicalOperationParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//LogicalNegationOperation BooleanOperation:
		//	EncapsulatedLogicalOperation | {LogicalNegationOperation} "!" value=EncapsulatedLogicalOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//EncapsulatedLogicalOperation | {LogicalNegationOperation} "!" value=EncapsulatedLogicalOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EncapsulatedLogicalOperation
		public RuleCall getEncapsulatedLogicalOperationParserRuleCall_0() { return cEncapsulatedLogicalOperationParserRuleCall_0; }
		
		//{LogicalNegationOperation} "!" value=EncapsulatedLogicalOperation
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalNegationOperation}
		public Action getLogicalNegationOperationAction_1_0() { return cLogicalNegationOperationAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//value=EncapsulatedLogicalOperation
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//EncapsulatedLogicalOperation
		public RuleCall getValueEncapsulatedLogicalOperationParserRuleCall_1_2_0() { return cValueEncapsulatedLogicalOperationParserRuleCall_1_2_0; }
	}
	public class EncapsulatedLogicalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.EncapsulatedLogicalOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleBooleanOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOrOperationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EncapsulatedLogicalOperation BooleanOperation:
		//	SimpleBooleanOperation |
		//	'(' LogicalOrOperation ')';
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleBooleanOperation |
		//'(' LogicalOrOperation ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleBooleanOperation
		public RuleCall getSimpleBooleanOperationParserRuleCall_0() { return cSimpleBooleanOperationParserRuleCall_0; }
		
		//'(' LogicalOrOperation ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//LogicalOrOperation
		public RuleCall getLogicalOrOperationParserRuleCall_1_1() { return cLogicalOrOperationParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class SimpleBooleanOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.SimpleBooleanOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptySetOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableEqualityOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableInequalityOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cElementOfOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleBooleanOperation:
		//	EmptySetOperation | VariableEqualityOperation | VariableInequalityOperation | ElementOfOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptySetOperation | VariableEqualityOperation | VariableInequalityOperation | ElementOfOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptySetOperation
		public RuleCall getEmptySetOperationParserRuleCall_0() { return cEmptySetOperationParserRuleCall_0; }
		
		//VariableEqualityOperation
		public RuleCall getVariableEqualityOperationParserRuleCall_1() { return cVariableEqualityOperationParserRuleCall_1; }
		
		//VariableInequalityOperation
		public RuleCall getVariableInequalityOperationParserRuleCall_2() { return cVariableInequalityOperationParserRuleCall_2; }
		
		//ElementOfOperation
		public RuleCall getElementOfOperationParserRuleCall_3() { return cElementOfOperationParserRuleCall_3; }
	}
	public class VariableEqualityOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.VariableEqualityOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCharacteristicReferenceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightCharacteristicReferenceParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//VariableEqualityOperation:
		//	left=CharacteristicReference "==" right=CharacteristicReference;
		@Override public ParserRule getRule() { return rule; }
		
		//left=CharacteristicReference "==" right=CharacteristicReference
		public Group getGroup() { return cGroup; }
		
		//left=CharacteristicReference
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//CharacteristicReference
		public RuleCall getLeftCharacteristicReferenceParserRuleCall_0_0() { return cLeftCharacteristicReferenceParserRuleCall_0_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//right=CharacteristicReference
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//CharacteristicReference
		public RuleCall getRightCharacteristicReferenceParserRuleCall_2_0() { return cRightCharacteristicReferenceParserRuleCall_2_0; }
	}
	public class VariableInequalityOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.VariableInequalityOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCharacteristicReferenceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightCharacteristicReferenceParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//VariableInequalityOperation:
		//	left=CharacteristicReference "!=" right=CharacteristicReference;
		@Override public ParserRule getRule() { return rule; }
		
		//left=CharacteristicReference "!=" right=CharacteristicReference
		public Group getGroup() { return cGroup; }
		
		//left=CharacteristicReference
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//CharacteristicReference
		public RuleCall getLeftCharacteristicReferenceParserRuleCall_0_0() { return cLeftCharacteristicReferenceParserRuleCall_0_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//right=CharacteristicReference
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//CharacteristicReference
		public RuleCall getRightCharacteristicReferenceParserRuleCall_2_0() { return cRightCharacteristicReferenceParserRuleCall_2_0; }
	}
	public class EmptySetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.EmptySetOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsEmptyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueCharacteristicSetReferenceParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EmptySetOperation:
		//	"isEmpty" "(" value=CharacteristicSetReference ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"isEmpty" "(" value=CharacteristicSetReference ")"
		public Group getGroup() { return cGroup; }
		
		//"isEmpty"
		public Keyword getIsEmptyKeyword_0() { return cIsEmptyKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=CharacteristicSetReference
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//CharacteristicSetReference
		public RuleCall getValueCharacteristicSetReferenceParserRuleCall_2_0() { return cValueCharacteristicSetReferenceParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IntersectionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.IntersectionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntersectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCharacteristicSetReferenceParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightCharacteristicSetReferenceParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntersectionOperation:
		//	"intersection" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"intersection" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")"
		public Group getGroup() { return cGroup; }
		
		//"intersection"
		public Keyword getIntersectionKeyword_0() { return cIntersectionKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=CharacteristicSetReference
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//CharacteristicSetReference
		public RuleCall getLeftCharacteristicSetReferenceParserRuleCall_2_0() { return cLeftCharacteristicSetReferenceParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//right=CharacteristicSetReference
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//CharacteristicSetReference
		public RuleCall getRightCharacteristicSetReferenceParserRuleCall_4_0() { return cRightCharacteristicSetReferenceParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UnionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.UnionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCharacteristicSetReferenceParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightCharacteristicSetReferenceParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnionOperation:
		//	"union" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"union" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")"
		public Group getGroup() { return cGroup; }
		
		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=CharacteristicSetReference
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//CharacteristicSetReference
		public RuleCall getLeftCharacteristicSetReferenceParserRuleCall_2_0() { return cLeftCharacteristicSetReferenceParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//right=CharacteristicSetReference
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//CharacteristicSetReference
		public RuleCall getRightCharacteristicSetReferenceParserRuleCall_4_0() { return cRightCharacteristicSetReferenceParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SubtractOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.SubtractOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCharacteristicSetReferenceParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightCharacteristicSetReferenceParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SubtractOperation:
		//	"subtract" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"subtract" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")"
		public Group getGroup() { return cGroup; }
		
		//"subtract"
		public Keyword getSubtractKeyword_0() { return cSubtractKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=CharacteristicSetReference
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//CharacteristicSetReference
		public RuleCall getLeftCharacteristicSetReferenceParserRuleCall_2_0() { return cLeftCharacteristicSetReferenceParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//right=CharacteristicSetReference
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//CharacteristicSetReference
		public RuleCall getRightCharacteristicSetReferenceParserRuleCall_4_0() { return cRightCharacteristicSetReferenceParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ElementOfOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.ElementOfOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCharacteristicReferenceParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightCharacteristicSetReferenceParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ElementOfOperation:
		//	"elementOf" "(" left=CharacteristicReference "," right=CharacteristicSetReference ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"elementOf" "(" left=CharacteristicReference "," right=CharacteristicSetReference ")"
		public Group getGroup() { return cGroup; }
		
		//"elementOf"
		public Keyword getElementOfKeyword_0() { return cElementOfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=CharacteristicReference
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//CharacteristicReference
		public RuleCall getLeftCharacteristicReferenceParserRuleCall_2_0() { return cLeftCharacteristicReferenceParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//right=CharacteristicSetReference
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//CharacteristicSetReference
		public RuleCall getRightCharacteristicSetReferenceParserRuleCall_4_0() { return cRightCharacteristicSetReferenceParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CreateSetOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CreateSetOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCharacteristicReferenceParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CreateSetOperation:
		//	"{" value=CharacteristicReference "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" value=CharacteristicReference "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//value=CharacteristicReference
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//CharacteristicReference
		public RuleCall getValueCharacteristicReferenceParserRuleCall_1_0() { return cValueCharacteristicReferenceParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	public class TargetModelTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.TargetModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOperationModelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOperationModelOperationModelKeyword_0_0 = (Keyword)cOperationModelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDataCentricPalladioEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDataCentricPalladioDataCentricPalladioKeyword_1_0 = (Keyword)cDataCentricPalladioEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExtendedDFDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExtendedDFDExtendedDFDKeyword_2_0 = (Keyword)cExtendedDFDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TargetModelType:
		//	OperationModel | DataCentricPalladio | ExtendedDFD;
		public EnumRule getRule() { return rule; }
		
		//OperationModel | DataCentricPalladio | ExtendedDFD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationModel
		public EnumLiteralDeclaration getOperationModelEnumLiteralDeclaration_0() { return cOperationModelEnumLiteralDeclaration_0; }
		
		//"OperationModel"
		public Keyword getOperationModelOperationModelKeyword_0_0() { return cOperationModelOperationModelKeyword_0_0; }
		
		//DataCentricPalladio
		public EnumLiteralDeclaration getDataCentricPalladioEnumLiteralDeclaration_1() { return cDataCentricPalladioEnumLiteralDeclaration_1; }
		
		//"DataCentricPalladio"
		public Keyword getDataCentricPalladioDataCentricPalladioKeyword_1_0() { return cDataCentricPalladioDataCentricPalladioKeyword_1_0; }
		
		//ExtendedDFD
		public EnumLiteralDeclaration getExtendedDFDEnumLiteralDeclaration_2() { return cExtendedDFDEnumLiteralDeclaration_2; }
		
		//"ExtendedDFD"
		public Keyword getExtendedDFDExtendedDFDKeyword_2_0() { return cExtendedDFDExtendedDFDKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final TargetModelTypeDefElements pTargetModelTypeDef;
	private final TargetModelTypeElements eTargetModelType;
	private final AbstractElementElements pAbstractElement;
	private final CharacteristicTypeElements pCharacteristicType;
	private final CharacteristicClassElements pCharacteristicClass;
	private final CharacteristicTypeSelectorElements pCharacteristicTypeSelector;
	private final CharacteristicVariableTypeElements pCharacteristicVariableType;
	private final CharacteristicVariableElements pCharacteristicVariable;
	private final CharacteristicSetElements pCharacteristicSet;
	private final IncludeElements pInclude;
	private final ConstraintElements pConstraint;
	private final RuleElements pRule;
	private final DataSelectorElements pDataSelector;
	private final CharacteristicSelectorElements pCharacteristicSelector;
	private final CharacteristicClassSelectorElements pCharacteristicClassSelector;
	private final AttributeSelectorElements pAttributeSelector;
	private final AttributeClassSelectorElements pAttributeClassSelector;
	private final DestinationSelectorElements pDestinationSelector;
	private final PropertySelectorElements pPropertySelector;
	private final PropertyClassSelectorElements pPropertyClassSelector;
	private final NodeIdentitiySelectorElements pNodeIdentitiySelector;
	private final StatementElements pStatement;
	private final StatementTypeElements pStatementType;
	private final StatementModalityElements pStatementModality;
	private final ConditionElements pCondition;
	private final ReferenceElements pReference;
	private final CharacteristicReferenceElements pCharacteristicReference;
	private final CharacteristicSetReferenceElements pCharacteristicSetReference;
	private final OperationElements pOperation;
	private final BooleanOperationElements pBooleanOperation;
	private final CharacteristsicSetOperationElements pCharacteristsicSetOperation;
	private final LogicalOrOperationElements pLogicalOrOperation;
	private final LogicalAndOperationElements pLogicalAndOperation;
	private final LogicalNegationOperationElements pLogicalNegationOperation;
	private final EncapsulatedLogicalOperationElements pEncapsulatedLogicalOperation;
	private final SimpleBooleanOperationElements pSimpleBooleanOperation;
	private final VariableEqualityOperationElements pVariableEqualityOperation;
	private final VariableInequalityOperationElements pVariableInequalityOperation;
	private final EmptySetOperationElements pEmptySetOperation;
	private final IntersectionOperationElements pIntersectionOperation;
	private final UnionOperationElements pUnionOperation;
	private final SubtractOperationElements pSubtractOperation;
	private final ElementOfOperationElements pElementOfOperation;
	private final CreateSetOperationElements pCreateSetOperation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTargetModelTypeDef = new TargetModelTypeDefElements();
		this.eTargetModelType = new TargetModelTypeElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pCharacteristicType = new CharacteristicTypeElements();
		this.pCharacteristicClass = new CharacteristicClassElements();
		this.pCharacteristicTypeSelector = new CharacteristicTypeSelectorElements();
		this.pCharacteristicVariableType = new CharacteristicVariableTypeElements();
		this.pCharacteristicVariable = new CharacteristicVariableElements();
		this.pCharacteristicSet = new CharacteristicSetElements();
		this.pInclude = new IncludeElements();
		this.pConstraint = new ConstraintElements();
		this.pRule = new RuleElements();
		this.pDataSelector = new DataSelectorElements();
		this.pCharacteristicSelector = new CharacteristicSelectorElements();
		this.pCharacteristicClassSelector = new CharacteristicClassSelectorElements();
		this.pAttributeSelector = new AttributeSelectorElements();
		this.pAttributeClassSelector = new AttributeClassSelectorElements();
		this.pDestinationSelector = new DestinationSelectorElements();
		this.pPropertySelector = new PropertySelectorElements();
		this.pPropertyClassSelector = new PropertyClassSelectorElements();
		this.pNodeIdentitiySelector = new NodeIdentitiySelectorElements();
		this.pStatement = new StatementElements();
		this.pStatementType = new StatementTypeElements();
		this.pStatementModality = new StatementModalityElements();
		this.pCondition = new ConditionElements();
		this.pReference = new ReferenceElements();
		this.pCharacteristicReference = new CharacteristicReferenceElements();
		this.pCharacteristicSetReference = new CharacteristicSetReferenceElements();
		this.pOperation = new OperationElements();
		this.pBooleanOperation = new BooleanOperationElements();
		this.pCharacteristsicSetOperation = new CharacteristsicSetOperationElements();
		this.pLogicalOrOperation = new LogicalOrOperationElements();
		this.pLogicalAndOperation = new LogicalAndOperationElements();
		this.pLogicalNegationOperation = new LogicalNegationOperationElements();
		this.pEncapsulatedLogicalOperation = new EncapsulatedLogicalOperationElements();
		this.pSimpleBooleanOperation = new SimpleBooleanOperationElements();
		this.pVariableEqualityOperation = new VariableEqualityOperationElements();
		this.pVariableInequalityOperation = new VariableInequalityOperationElements();
		this.pEmptySetOperation = new EmptySetOperationElements();
		this.pIntersectionOperation = new IntersectionOperationElements();
		this.pUnionOperation = new UnionOperationElements();
		this.pSubtractOperation = new SubtractOperationElements();
		this.pElementOfOperation = new ElementOfOperationElements();
		this.pCreateSetOperation = new CreateSetOperationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.sebinside.dcp.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	targetModelType=TargetModelTypeDef?
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TargetModelTypeDef:
	//	'target' type=TargetModelType ('using' typeContainer=[dictionary::DataDictionaryCharacterized] (','
	//	allocationModel=[allocation::Allocation] ',' usageModel=[usagemodel::UsageModel])?)?;
	public TargetModelTypeDefElements getTargetModelTypeDefAccess() {
		return pTargetModelTypeDef;
	}
	
	public ParserRule getTargetModelTypeDefRule() {
		return getTargetModelTypeDefAccess().getRule();
	}
	
	//enum TargetModelType:
	//	OperationModel | DataCentricPalladio | ExtendedDFD;
	public TargetModelTypeElements getTargetModelTypeAccess() {
		return eTargetModelType;
	}
	
	public EnumRule getTargetModelTypeRule() {
		return getTargetModelTypeAccess().getRule();
	}
	
	//AbstractElement:
	//	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//CharacteristicType:
	//	'type' name=ID ':' ref=[dictionary::CharacteristicType];
	public CharacteristicTypeElements getCharacteristicTypeAccess() {
		return pCharacteristicType;
	}
	
	public ParserRule getCharacteristicTypeRule() {
		return getCharacteristicTypeAccess().getRule();
	}
	
	//CharacteristicClass:
	//	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';
	public CharacteristicClassElements getCharacteristicClassAccess() {
		return pCharacteristicClass;
	}
	
	public ParserRule getCharacteristicClassRule() {
		return getCharacteristicClassAccess().getRule();
	}
	
	//CharacteristicTypeSelector:
	//	ref=[CharacteristicType] '.' (negated?='!'? literals+=[dictionary::Literal] | '[' literals+=[dictionary::Literal] (
	//	',' literals+=[dictionary::Literal])*
	//	']' | isVariableSelector?="$"variable=CharacteristicVariableType);
	public CharacteristicTypeSelectorElements getCharacteristicTypeSelectorAccess() {
		return pCharacteristicTypeSelector;
	}
	
	public ParserRule getCharacteristicTypeSelectorRule() {
		return getCharacteristicTypeSelectorAccess().getRule();
	}
	
	//CharacteristicVariableType:
	//	CharacteristicVariable | CharacteristicSet;
	public CharacteristicVariableTypeElements getCharacteristicVariableTypeAccess() {
		return pCharacteristicVariableType;
	}
	
	public ParserRule getCharacteristicVariableTypeRule() {
		return getCharacteristicVariableTypeAccess().getRule();
	}
	
	//CharacteristicVariable:
	//	name=ID;
	public CharacteristicVariableElements getCharacteristicVariableAccess() {
		return pCharacteristicVariable;
	}
	
	public ParserRule getCharacteristicVariableRule() {
		return getCharacteristicVariableAccess().getRule();
	}
	
	//CharacteristicSet:
	//	name=ID "{}";
	public CharacteristicSetElements getCharacteristicSetAccess() {
		return pCharacteristicSet;
	}
	
	public ParserRule getCharacteristicSetRule() {
		return getCharacteristicSetAccess().getRule();
	}
	
	//Include:
	//	'import' importURI=STRING;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Constraint:
	//	'constraint' name=ID '{' rule=Rule '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Rule:
	//	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
	//	statement=Statement
	//	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
	//	condition=Condition?;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//DataSelector:
	//	AttributeSelector | AttributeClassSelector;
	public DataSelectorElements getDataSelectorAccess() {
		return pDataSelector;
	}
	
	public ParserRule getDataSelectorRule() {
		return getDataSelectorAccess().getRule();
	}
	
	//CharacteristicSelector:
	//	AttributeSelector | PropertySelector;
	public CharacteristicSelectorElements getCharacteristicSelectorAccess() {
		return pCharacteristicSelector;
	}
	
	public ParserRule getCharacteristicSelectorRule() {
		return getCharacteristicSelectorAccess().getRule();
	}
	
	//CharacteristicClassSelector:
	//	AttributeClassSelector | PropertyClassSelector;
	public CharacteristicClassSelectorElements getCharacteristicClassSelectorAccess() {
		return pCharacteristicClassSelector;
	}
	
	public ParserRule getCharacteristicClassSelectorRule() {
		return getCharacteristicClassSelectorAccess().getRule();
	}
	
	//AttributeSelector:
	//	'data.attribute.' ref=CharacteristicTypeSelector;
	public AttributeSelectorElements getAttributeSelectorAccess() {
		return pAttributeSelector;
	}
	
	public ParserRule getAttributeSelectorRule() {
		return getAttributeSelectorAccess().getRule();
	}
	
	//AttributeClassSelector:
	//	'data.class.' ref=[CharacteristicClass];
	public AttributeClassSelectorElements getAttributeClassSelectorAccess() {
		return pAttributeClassSelector;
	}
	
	public ParserRule getAttributeClassSelectorRule() {
		return getAttributeClassSelectorAccess().getRule();
	}
	
	//DestinationSelector:
	//	PropertySelector | PropertyClassSelector | NodeIdentitiySelector;
	public DestinationSelectorElements getDestinationSelectorAccess() {
		return pDestinationSelector;
	}
	
	public ParserRule getDestinationSelectorRule() {
		return getDestinationSelectorAccess().getRule();
	}
	
	//PropertySelector:
	//	'node.property.' ref=CharacteristicTypeSelector;
	public PropertySelectorElements getPropertySelectorAccess() {
		return pPropertySelector;
	}
	
	public ParserRule getPropertySelectorRule() {
		return getPropertySelectorAccess().getRule();
	}
	
	//PropertyClassSelector:
	//	'node.class.' ref=[CharacteristicClass];
	public PropertyClassSelectorElements getPropertyClassSelectorAccess() {
		return pPropertyClassSelector;
	}
	
	public ParserRule getPropertyClassSelectorRule() {
		return getPropertyClassSelectorAccess().getRule();
	}
	
	//NodeIdentitiySelector:
	//	'node.name.' name=STRING | 'node.identity.' (assembly=[composition::AssemblyContext] '.'
	//	component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification] |
	//	diaNode=[diagram::CharacterizedNode]);
	public NodeIdentitiySelectorElements getNodeIdentitiySelectorAccess() {
		return pNodeIdentitiySelector;
	}
	
	public ParserRule getNodeIdentitiySelectorRule() {
		return getNodeIdentitiySelectorAccess().getRule();
	}
	
	//Statement:
	//	modality=StatementModality type=StatementType;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementType:
	//	name='FLOWS';
	public StatementTypeElements getStatementTypeAccess() {
		return pStatementType;
	}
	
	public ParserRule getStatementTypeRule() {
		return getStatementTypeAccess().getRule();
	}
	
	//StatementModality:
	//	name='NEVER';
	public StatementModalityElements getStatementModalityAccess() {
		return pStatementModality;
	}
	
	public ParserRule getStatementModalityRule() {
		return getStatementModalityAccess().getRule();
	}
	
	//Condition:
	//	'WHERE' operation=BooleanOperation;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Reference:
	//	CharacteristicReference | CharacteristicSetReference;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//CharacteristicReference:
	//	value=[CharacteristicVariable];
	public CharacteristicReferenceElements getCharacteristicReferenceAccess() {
		return pCharacteristicReference;
	}
	
	public ParserRule getCharacteristicReferenceRule() {
		return getCharacteristicReferenceAccess().getRule();
	}
	
	//CharacteristicSetReference:
	//	value=[CharacteristicSet] | ref=CharacteristsicSetOperation;
	public CharacteristicSetReferenceElements getCharacteristicSetReferenceAccess() {
		return pCharacteristicSetReference;
	}
	
	public ParserRule getCharacteristicSetReferenceRule() {
		return getCharacteristicSetReferenceAccess().getRule();
	}
	
	//Operation:
	//	BooleanOperation | CharacteristsicSetOperation;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//BooleanOperation:
	//	LogicalOrOperation;
	public BooleanOperationElements getBooleanOperationAccess() {
		return pBooleanOperation;
	}
	
	public ParserRule getBooleanOperationRule() {
		return getBooleanOperationAccess().getRule();
	}
	
	//CharacteristsicSetOperation:
	//	CreateSetOperation | IntersectionOperation | UnionOperation | SubtractOperation;
	public CharacteristsicSetOperationElements getCharacteristsicSetOperationAccess() {
		return pCharacteristsicSetOperation;
	}
	
	public ParserRule getCharacteristsicSetOperationRule() {
		return getCharacteristsicSetOperationAccess().getRule();
	}
	
	//LogicalOrOperation BooleanOperation:
	//	LogicalAndOperation ({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*;
	public LogicalOrOperationElements getLogicalOrOperationAccess() {
		return pLogicalOrOperation;
	}
	
	public ParserRule getLogicalOrOperationRule() {
		return getLogicalOrOperationAccess().getRule();
	}
	
	//LogicalAndOperation BooleanOperation:
	//	LogicalNegationOperation ({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*;
	public LogicalAndOperationElements getLogicalAndOperationAccess() {
		return pLogicalAndOperation;
	}
	
	public ParserRule getLogicalAndOperationRule() {
		return getLogicalAndOperationAccess().getRule();
	}
	
	//LogicalNegationOperation BooleanOperation:
	//	EncapsulatedLogicalOperation | {LogicalNegationOperation} "!" value=EncapsulatedLogicalOperation;
	public LogicalNegationOperationElements getLogicalNegationOperationAccess() {
		return pLogicalNegationOperation;
	}
	
	public ParserRule getLogicalNegationOperationRule() {
		return getLogicalNegationOperationAccess().getRule();
	}
	
	//EncapsulatedLogicalOperation BooleanOperation:
	//	SimpleBooleanOperation |
	//	'(' LogicalOrOperation ')';
	public EncapsulatedLogicalOperationElements getEncapsulatedLogicalOperationAccess() {
		return pEncapsulatedLogicalOperation;
	}
	
	public ParserRule getEncapsulatedLogicalOperationRule() {
		return getEncapsulatedLogicalOperationAccess().getRule();
	}
	
	//SimpleBooleanOperation:
	//	EmptySetOperation | VariableEqualityOperation | VariableInequalityOperation | ElementOfOperation;
	public SimpleBooleanOperationElements getSimpleBooleanOperationAccess() {
		return pSimpleBooleanOperation;
	}
	
	public ParserRule getSimpleBooleanOperationRule() {
		return getSimpleBooleanOperationAccess().getRule();
	}
	
	//VariableEqualityOperation:
	//	left=CharacteristicReference "==" right=CharacteristicReference;
	public VariableEqualityOperationElements getVariableEqualityOperationAccess() {
		return pVariableEqualityOperation;
	}
	
	public ParserRule getVariableEqualityOperationRule() {
		return getVariableEqualityOperationAccess().getRule();
	}
	
	//VariableInequalityOperation:
	//	left=CharacteristicReference "!=" right=CharacteristicReference;
	public VariableInequalityOperationElements getVariableInequalityOperationAccess() {
		return pVariableInequalityOperation;
	}
	
	public ParserRule getVariableInequalityOperationRule() {
		return getVariableInequalityOperationAccess().getRule();
	}
	
	//EmptySetOperation:
	//	"isEmpty" "(" value=CharacteristicSetReference ")";
	public EmptySetOperationElements getEmptySetOperationAccess() {
		return pEmptySetOperation;
	}
	
	public ParserRule getEmptySetOperationRule() {
		return getEmptySetOperationAccess().getRule();
	}
	
	//IntersectionOperation:
	//	"intersection" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public IntersectionOperationElements getIntersectionOperationAccess() {
		return pIntersectionOperation;
	}
	
	public ParserRule getIntersectionOperationRule() {
		return getIntersectionOperationAccess().getRule();
	}
	
	//UnionOperation:
	//	"union" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public UnionOperationElements getUnionOperationAccess() {
		return pUnionOperation;
	}
	
	public ParserRule getUnionOperationRule() {
		return getUnionOperationAccess().getRule();
	}
	
	//SubtractOperation:
	//	"subtract" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public SubtractOperationElements getSubtractOperationAccess() {
		return pSubtractOperation;
	}
	
	public ParserRule getSubtractOperationRule() {
		return getSubtractOperationAccess().getRule();
	}
	
	//ElementOfOperation:
	//	"elementOf" "(" left=CharacteristicReference "," right=CharacteristicSetReference ")";
	public ElementOfOperationElements getElementOfOperationAccess() {
		return pElementOfOperation;
	}
	
	public ParserRule getElementOfOperationRule() {
		return getElementOfOperationAccess().getRule();
	}
	
	//CreateSetOperation:
	//	"{" value=CharacteristicReference "}";
	public CreateSetOperationElements getCreateSetOperationAccess() {
		return pCreateSetOperation;
	}
	
	public ParserRule getCreateSetOperationRule() {
		return getCreateSetOperationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
