/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.CharacteristicType;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.Literal;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.EnumCharacteristicType;
import org.palladiosimulator.dataflow.dictionary.characterized.DataDictionaryCharacterized.Enumeration;
import org.palladiosimulator.pcm.repository.BasicComponent;
import org.palladiosimulator.pcm.repository.RepositoryComponent;
import org.palladiosimulator.pcm.seff.ServiceEffectSpecification;

import de.sebinside.dcp.dsl.dSL.CharacteristicTypeSelector;
import de.sebinside.dcp.dsl.dSL.DSLPackage;
import de.sebinside.dcp.dsl.dSL.NodeIdentitiySelector;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class DSLScopeProvider extends AbstractDSLScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
		

		if (context instanceof CharacteristicTypeSelector
				&& reference == DSLPackage.Literals.CHARACTERISTIC_TYPE_SELECTOR__LITERALS) {

			CharacteristicType type = ((CharacteristicTypeSelector) context).getRef().getRef();

			// Assumption: The DSL is intended to only work with EnumCharacteristicType
			if (type instanceof EnumCharacteristicType) {
				EnumCharacteristicType enumType = (EnumCharacteristicType) type;
				Enumeration literalEnumeration = enumType.getType();

				// This is the case if the characteristic type is invalid referenced
				if (literalEnumeration != null) {
					List<Literal> literals = literalEnumeration.getLiterals();

					IScope scope = Scopes.scopeFor(literals, literal -> QualifiedName.create(literal.getName()),
							IScope.NULLSCOPE);

					return scope;
				}
			}
			return super.getScope(context, reference);
		}
		
//		if(context instanceof NodeIdentitiySelector
//				&& reference == DSLPackage.Literals.NODE_IDENTITIY_SELECTOR__DIA_NODE)

		return super.getScope(context, reference);
	}
}
