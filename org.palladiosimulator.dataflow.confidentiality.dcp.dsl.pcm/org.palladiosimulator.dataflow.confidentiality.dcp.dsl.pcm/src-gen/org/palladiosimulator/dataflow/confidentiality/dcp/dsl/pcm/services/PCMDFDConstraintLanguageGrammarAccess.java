/*
 * generated by Xtext 2.24.0
 */
package org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.sebinside.dcp.dsl.services.DSLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PCMDFDConstraintLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTargetModelTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0_0 = (RuleCall)cTargetModelTypeAssignment_0_0.eContents().get(0);
		private final Assignment cPcmTargetModelTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPcmTargetModelTypePCMTargetModelTypeDefParserRuleCall_0_1_0 = (RuleCall)cPcmTargetModelTypeAssignment_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//@Override
		//Model:
		//	(targetModelType=TargetModelTypeDef | pcmTargetModelType=PCMTargetModelTypeDef)?
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//(targetModelType=TargetModelTypeDef | pcmTargetModelType=PCMTargetModelTypeDef)?
		//elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//(targetModelType=TargetModelTypeDef | pcmTargetModelType=PCMTargetModelTypeDef)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//targetModelType=TargetModelTypeDef
		public Assignment getTargetModelTypeAssignment_0_0() { return cTargetModelTypeAssignment_0_0; }
		
		//TargetModelTypeDef
		public RuleCall getTargetModelTypeTargetModelTypeDefParserRuleCall_0_0_0() { return cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0_0; }
		
		//pcmTargetModelType=PCMTargetModelTypeDef
		public Assignment getPcmTargetModelTypeAssignment_0_1() { return cPcmTargetModelTypeAssignment_0_1; }
		
		//PCMTargetModelTypeDef
		public RuleCall getPcmTargetModelTypePCMTargetModelTypeDefParserRuleCall_0_1_0() { return cPcmTargetModelTypePCMTargetModelTypeDefParserRuleCall_0_1_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class PCMTargetModelTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.PCMTargetModelTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTargetModelTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PCMTargetModelTypeDef:
		//	'target' type=TargetModelType// 'using' pcmTypeContainer=[pcmDictionary::CharacteristicTypeDictionary] 
		////		',' usageModel=[usagemodel::UsageModel] ',' repositoryModel=[repository::Repository]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' type=TargetModelType
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//type=TargetModelType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TargetModelType
		public RuleCall getTypeTargetModelTypeEnumRuleCall_1_0() { return cTypeTargetModelTypeEnumRuleCall_1_0; }
	}
	public class DestinationSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.DestinationSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertySelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentIdentitySelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//@Override
		//DestinationSelector base::DestinationSelector:
		//	PropertySelector | PropertyClassSelector | ComponentIdentitySelector;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertySelector | PropertyClassSelector | ComponentIdentitySelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertySelector
		public RuleCall getPropertySelectorParserRuleCall_0() { return cPropertySelectorParserRuleCall_0; }
		
		//PropertyClassSelector
		public RuleCall getPropertyClassSelectorParserRuleCall_1() { return cPropertyClassSelectorParserRuleCall_1; }
		
		//ComponentIdentitySelector
		public RuleCall getComponentIdentitySelectorParserRuleCall_2() { return cComponentIdentitySelectorParserRuleCall_2; }
	}
	public class PropertySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.PropertySelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefCharacteristicTypeSelectorParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//@Override
		//PropertySelector:
		//	'component.property.' ref=CharacteristicTypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//'component.property.' ref=CharacteristicTypeSelector
		public Group getGroup() { return cGroup; }
		
		//'component.property.'
		public Keyword getComponentPropertyKeyword_0() { return cComponentPropertyKeyword_0; }
		
		//ref=CharacteristicTypeSelector
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getRefCharacteristicTypeSelectorParserRuleCall_1_0() { return cRefCharacteristicTypeSelectorParserRuleCall_1_0; }
	}
	public class PropertyClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.PropertyClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCharacteristicClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCharacteristicClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCharacteristicClassCrossReference_1_0.eContents().get(1);
		
		//@Override
		//PropertyClassSelector:
		//	'component.class.' ref=[base::CharacteristicClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'component.class.' ref=[base::CharacteristicClass]
		public Group getGroup() { return cGroup; }
		
		//'component.class.'
		public Keyword getComponentClassKeyword_0() { return cComponentClassKeyword_0; }
		
		//ref=[base::CharacteristicClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[base::CharacteristicClass]
		public CrossReference getRefCharacteristicClassCrossReference_1_0() { return cRefCharacteristicClassCrossReference_1_0; }
		
		//ID
		public RuleCall getRefCharacteristicClassIDTerminalRuleCall_1_0_1() { return cRefCharacteristicClassIDTerminalRuleCall_1_0_1; }
	}
	public class ComponentIdentitySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.ComponentIdentitySelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ComponentIdentitySelector:
		//	'component.name.' name=STRING//	| 'component.identity.' (
		////		'Action.' action=[seff::AbstractAction] |
		////		'SEFF.' assembly=[composition::AssemblyContext] '.' component=[repository::BasicComponent] '.' signature=[repository::OperationSignature] |
		////		'UserAction.' userAction=[usagemodel::EntryLevelSystemCall] |
		////		'Store.' assembly=[composition::AssemblyContext] '.' store=[pcmConfRepository::OperationalDataStoreComponent])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'component.name.' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'component.name.'
		public Keyword getComponentNameKeyword_0() { return cComponentNameKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	
	public class TargetModelTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage.TargetModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPCMDFDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPCMDFDPCMDFDKeyword_0_0 = (Keyword)cPCMDFDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExtendedDFDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExtendedDFDExtendedDFDKeyword_1_0 = (Keyword)cExtendedDFDEnumLiteralDeclaration_1.eContents().get(0);
		
		//@Override
		//enum TargetModelType returns base::TargetModelType:
		//	PCMDFD | ExtendedDFD;
		public EnumRule getRule() { return rule; }
		
		//PCMDFD | ExtendedDFD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PCMDFD
		public EnumLiteralDeclaration getPCMDFDEnumLiteralDeclaration_0() { return cPCMDFDEnumLiteralDeclaration_0; }
		
		//"PCMDFD"
		public Keyword getPCMDFDPCMDFDKeyword_0_0() { return cPCMDFDPCMDFDKeyword_0_0; }
		
		//ExtendedDFD
		public EnumLiteralDeclaration getExtendedDFDEnumLiteralDeclaration_1() { return cExtendedDFDEnumLiteralDeclaration_1; }
		
		//"ExtendedDFD"
		public Keyword getExtendedDFDExtendedDFDKeyword_1_0() { return cExtendedDFDExtendedDFDKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final PCMTargetModelTypeDefElements pPCMTargetModelTypeDef;
	private final TargetModelTypeElements eTargetModelType;
	private final DestinationSelectorElements pDestinationSelector;
	private final PropertySelectorElements pPropertySelector;
	private final PropertyClassSelectorElements pPropertyClassSelector;
	private final ComponentIdentitySelectorElements pComponentIdentitySelector;
	
	private final Grammar grammar;
	
	private final DSLGrammarAccess gaDSL;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PCMDFDConstraintLanguageGrammarAccess(GrammarProvider grammarProvider,
			DSLGrammarAccess gaDSL,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDSL = gaDSL;
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPCMTargetModelTypeDef = new PCMTargetModelTypeDefElements();
		this.eTargetModelType = new TargetModelTypeElements();
		this.pDestinationSelector = new DestinationSelectorElements();
		this.pPropertySelector = new PropertySelectorElements();
		this.pPropertyClassSelector = new PropertyClassSelectorElements();
		this.pComponentIdentitySelector = new ComponentIdentitySelectorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.dataflow.confidentiality.dcp.dsl.pcm.PCMDFDConstraintLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DSLGrammarAccess getDSLGrammarAccess() {
		return gaDSL;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//@Override
	//Model:
	//	(targetModelType=TargetModelTypeDef | pcmTargetModelType=PCMTargetModelTypeDef)?
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PCMTargetModelTypeDef:
	//	'target' type=TargetModelType// 'using' pcmTypeContainer=[pcmDictionary::CharacteristicTypeDictionary] 
	////		',' usageModel=[usagemodel::UsageModel] ',' repositoryModel=[repository::Repository]
	//;
	public PCMTargetModelTypeDefElements getPCMTargetModelTypeDefAccess() {
		return pPCMTargetModelTypeDef;
	}
	
	public ParserRule getPCMTargetModelTypeDefRule() {
		return getPCMTargetModelTypeDefAccess().getRule();
	}
	
	//@Override
	//enum TargetModelType returns base::TargetModelType:
	//	PCMDFD | ExtendedDFD;
	public TargetModelTypeElements getTargetModelTypeAccess() {
		return eTargetModelType;
	}
	
	public EnumRule getTargetModelTypeRule() {
		return getTargetModelTypeAccess().getRule();
	}
	
	//@Override
	//DestinationSelector base::DestinationSelector:
	//	PropertySelector | PropertyClassSelector | ComponentIdentitySelector;
	public DestinationSelectorElements getDestinationSelectorAccess() {
		return pDestinationSelector;
	}
	
	public ParserRule getDestinationSelectorRule() {
		return getDestinationSelectorAccess().getRule();
	}
	
	//@Override
	//PropertySelector:
	//	'component.property.' ref=CharacteristicTypeSelector;
	public PropertySelectorElements getPropertySelectorAccess() {
		return pPropertySelector;
	}
	
	public ParserRule getPropertySelectorRule() {
		return getPropertySelectorAccess().getRule();
	}
	
	//@Override
	//PropertyClassSelector:
	//	'component.class.' ref=[base::CharacteristicClass];
	public PropertyClassSelectorElements getPropertyClassSelectorAccess() {
		return pPropertyClassSelector;
	}
	
	public ParserRule getPropertyClassSelectorRule() {
		return getPropertyClassSelectorAccess().getRule();
	}
	
	//ComponentIdentitySelector:
	//	'component.name.' name=STRING//	| 'component.identity.' (
	////		'Action.' action=[seff::AbstractAction] |
	////		'SEFF.' assembly=[composition::AssemblyContext] '.' component=[repository::BasicComponent] '.' signature=[repository::OperationSignature] |
	////		'UserAction.' userAction=[usagemodel::EntryLevelSystemCall] |
	////		'Store.' assembly=[composition::AssemblyContext] '.' store=[pcmConfRepository::OperationalDataStoreComponent])
	//;
	public ComponentIdentitySelectorElements getComponentIdentitySelectorAccess() {
		return pComponentIdentitySelector;
	}
	
	public ParserRule getComponentIdentitySelectorRule() {
		return getComponentIdentitySelectorAccess().getRule();
	}
	
	//TargetModelTypeDef:
	//	'target' type=super::TargetModelType 'using' typeContainer=[dictionary::DataDictionaryCharacterized];
	public DSLGrammarAccess.TargetModelTypeDefElements getTargetModelTypeDefAccess() {
		return gaDSL.getTargetModelTypeDefAccess();
	}
	
	public ParserRule getTargetModelTypeDefRule() {
		return getTargetModelTypeDefAccess().getRule();
	}
	
	//AbstractElement:
	//	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;
	public DSLGrammarAccess.AbstractElementElements getAbstractElementAccess() {
		return gaDSL.getAbstractElementAccess();
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//CharacteristicType:
	//	'type' name=ID ':' ref=[dictionary::EnumCharacteristicType];
	public DSLGrammarAccess.CharacteristicTypeElements getCharacteristicTypeAccess() {
		return gaDSL.getCharacteristicTypeAccess();
	}
	
	public ParserRule getCharacteristicTypeRule() {
		return getCharacteristicTypeAccess().getRule();
	}
	
	//CharacteristicClass:
	//	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';
	public DSLGrammarAccess.CharacteristicClassElements getCharacteristicClassAccess() {
		return gaDSL.getCharacteristicClassAccess();
	}
	
	public ParserRule getCharacteristicClassRule() {
		return getCharacteristicClassAccess().getRule();
	}
	
	//CharacteristicTypeSelector:
	//	ref=[CharacteristicType] '.' (negated?='!'? literals+=[dictionary::Literal] | '[' literals+=[dictionary::Literal] (
	//	',' literals+=[dictionary::Literal])*
	//	']' | isVariableSelector?="$"variable=CharacteristicVariableType);
	public DSLGrammarAccess.CharacteristicTypeSelectorElements getCharacteristicTypeSelectorAccess() {
		return gaDSL.getCharacteristicTypeSelectorAccess();
	}
	
	public ParserRule getCharacteristicTypeSelectorRule() {
		return getCharacteristicTypeSelectorAccess().getRule();
	}
	
	//CharacteristicVariableType:
	//	CharacteristicVariable | CharacteristicSet;
	public DSLGrammarAccess.CharacteristicVariableTypeElements getCharacteristicVariableTypeAccess() {
		return gaDSL.getCharacteristicVariableTypeAccess();
	}
	
	public ParserRule getCharacteristicVariableTypeRule() {
		return getCharacteristicVariableTypeAccess().getRule();
	}
	
	//CharacteristicVariable:
	//	name=ID;
	public DSLGrammarAccess.CharacteristicVariableElements getCharacteristicVariableAccess() {
		return gaDSL.getCharacteristicVariableAccess();
	}
	
	public ParserRule getCharacteristicVariableRule() {
		return getCharacteristicVariableAccess().getRule();
	}
	
	//CharacteristicSet:
	//	name=ID "{}";
	public DSLGrammarAccess.CharacteristicSetElements getCharacteristicSetAccess() {
		return gaDSL.getCharacteristicSetAccess();
	}
	
	public ParserRule getCharacteristicSetRule() {
		return getCharacteristicSetAccess().getRule();
	}
	
	//Include:
	//	'import' importURI=STRING;
	public DSLGrammarAccess.IncludeElements getIncludeAccess() {
		return gaDSL.getIncludeAccess();
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Constraint:
	//	'constraint' name=ID '{' rule=Rule '}';
	public DSLGrammarAccess.ConstraintElements getConstraintAccess() {
		return gaDSL.getConstraintAccess();
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Rule:
	//	destinationSelectors+=super::DestinationSelector ('&' destinationSelectors+=super::DestinationSelector)*
	//	statement=Statement
	//	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
	//	condition=Condition?;
	public DSLGrammarAccess.RuleElements getRuleAccess() {
		return gaDSL.getRuleAccess();
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	////	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
	////	statement=Statement
	////	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
	////	(condition=Condition)?;
	//DataSelector:
	//	AttributeSelector | AttributeClassSelector;
	public DSLGrammarAccess.DataSelectorElements getDataSelectorAccess() {
		return gaDSL.getDataSelectorAccess();
	}
	
	public ParserRule getDataSelectorRule() {
		return getDataSelectorAccess().getRule();
	}
	
	//CharacteristicSelector:
	//	AttributeSelector | super::PropertySelector;
	public DSLGrammarAccess.CharacteristicSelectorElements getCharacteristicSelectorAccess() {
		return gaDSL.getCharacteristicSelectorAccess();
	}
	
	public ParserRule getCharacteristicSelectorRule() {
		return getCharacteristicSelectorAccess().getRule();
	}
	
	//CharacteristicClassSelector:
	//	AttributeClassSelector | super::PropertyClassSelector;
	public DSLGrammarAccess.CharacteristicClassSelectorElements getCharacteristicClassSelectorAccess() {
		return gaDSL.getCharacteristicClassSelectorAccess();
	}
	
	public ParserRule getCharacteristicClassSelectorRule() {
		return getCharacteristicClassSelectorAccess().getRule();
	}
	
	//AttributeSelector:
	//	'data.attribute.' ref=CharacteristicTypeSelector;
	public DSLGrammarAccess.AttributeSelectorElements getAttributeSelectorAccess() {
		return gaDSL.getAttributeSelectorAccess();
	}
	
	public ParserRule getAttributeSelectorRule() {
		return getAttributeSelectorAccess().getRule();
	}
	
	//AttributeClassSelector:
	//	'data.class.' ref=[CharacteristicClass];
	public DSLGrammarAccess.AttributeClassSelectorElements getAttributeClassSelectorAccess() {
		return gaDSL.getAttributeClassSelectorAccess();
	}
	
	public ParserRule getAttributeClassSelectorRule() {
		return getAttributeClassSelectorAccess().getRule();
	}
	
	//NodeIdentitiySelector:
	//	'node.name.' name=STRING | 'node.identity.' diaNode=[diagram::CharacterizedNode];
	public DSLGrammarAccess.NodeIdentitiySelectorElements getNodeIdentitiySelectorAccess() {
		return gaDSL.getNodeIdentitiySelectorAccess();
	}
	
	public ParserRule getNodeIdentitiySelectorRule() {
		return getNodeIdentitiySelectorAccess().getRule();
	}
	
	////NodeIdentitiySelector:
	////	'node.name.' name=STRING | 'node.identity.' (
	////		'Action.' action=[seff::AbstractAction] |
	////		'SEFF.' assembly=[composition::AssemblyContext] '.' component=[repository::BasicComponent] '.' signature=[repository::OperationSignature] |
	////		'UserAction.' userAction=[usagemodel::EntryLevelSystemCall] |
	////		'Store.' assembly=[composition::AssemblyContext] '.' store=[pcmConfRepository::OperationalDataStoreComponent] |
	////		diaNode=[diagram::CharacterizedNode]
	////	);
	//// ('Entry'|'Exit') bei ExternalCallAction, SEFF und UserAction
	//Statement:
	//	modality=StatementModality type=StatementType;
	public DSLGrammarAccess.StatementElements getStatementAccess() {
		return gaDSL.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementType:
	//	name='FLOWS';
	public DSLGrammarAccess.StatementTypeElements getStatementTypeAccess() {
		return gaDSL.getStatementTypeAccess();
	}
	
	public ParserRule getStatementTypeRule() {
		return getStatementTypeAccess().getRule();
	}
	
	//StatementModality:
	//	name='NEVER';
	public DSLGrammarAccess.StatementModalityElements getStatementModalityAccess() {
		return gaDSL.getStatementModalityAccess();
	}
	
	public ParserRule getStatementModalityRule() {
		return getStatementModalityAccess().getRule();
	}
	
	//Condition:
	//	'WHERE' operation=BooleanOperation;
	public DSLGrammarAccess.ConditionElements getConditionAccess() {
		return gaDSL.getConditionAccess();
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Reference:
	//	CharacteristicReference | CharacteristicSetReference;
	public DSLGrammarAccess.ReferenceElements getReferenceAccess() {
		return gaDSL.getReferenceAccess();
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//CharacteristicReference:
	//	value=[CharacteristicVariable];
	public DSLGrammarAccess.CharacteristicReferenceElements getCharacteristicReferenceAccess() {
		return gaDSL.getCharacteristicReferenceAccess();
	}
	
	public ParserRule getCharacteristicReferenceRule() {
		return getCharacteristicReferenceAccess().getRule();
	}
	
	//CharacteristicSetReference:
	//	value=[CharacteristicSet] | ref=CharacteristsicSetOperation;
	public DSLGrammarAccess.CharacteristicSetReferenceElements getCharacteristicSetReferenceAccess() {
		return gaDSL.getCharacteristicSetReferenceAccess();
	}
	
	public ParserRule getCharacteristicSetReferenceRule() {
		return getCharacteristicSetReferenceAccess().getRule();
	}
	
	//Operation:
	//	BooleanOperation | CharacteristsicSetOperation;
	public DSLGrammarAccess.OperationElements getOperationAccess() {
		return gaDSL.getOperationAccess();
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//BooleanOperation:
	//	LogicalOrOperation;
	public DSLGrammarAccess.BooleanOperationElements getBooleanOperationAccess() {
		return gaDSL.getBooleanOperationAccess();
	}
	
	public ParserRule getBooleanOperationRule() {
		return getBooleanOperationAccess().getRule();
	}
	
	//CharacteristsicSetOperation:
	//	CreateSetOperation | IntersectionOperation | UnionOperation | SubtractOperation;
	public DSLGrammarAccess.CharacteristsicSetOperationElements getCharacteristsicSetOperationAccess() {
		return gaDSL.getCharacteristsicSetOperationAccess();
	}
	
	public ParserRule getCharacteristsicSetOperationRule() {
		return getCharacteristsicSetOperationAccess().getRule();
	}
	
	//LogicalOrOperation BooleanOperation:
	//	LogicalAndOperation ({LogicalOrOperation.left=current} "|" right=LogicalAndOperation)*;
	public DSLGrammarAccess.LogicalOrOperationElements getLogicalOrOperationAccess() {
		return gaDSL.getLogicalOrOperationAccess();
	}
	
	public ParserRule getLogicalOrOperationRule() {
		return getLogicalOrOperationAccess().getRule();
	}
	
	//LogicalAndOperation BooleanOperation:
	//	LogicalNegationOperation ({LogicalAndOperation.left=current} "&" right=LogicalNegationOperation)*;
	public DSLGrammarAccess.LogicalAndOperationElements getLogicalAndOperationAccess() {
		return gaDSL.getLogicalAndOperationAccess();
	}
	
	public ParserRule getLogicalAndOperationRule() {
		return getLogicalAndOperationAccess().getRule();
	}
	
	//LogicalNegationOperation BooleanOperation:
	//	EncapsulatedLogicalOperation | {LogicalNegationOperation} "!" value=EncapsulatedLogicalOperation;
	public DSLGrammarAccess.LogicalNegationOperationElements getLogicalNegationOperationAccess() {
		return gaDSL.getLogicalNegationOperationAccess();
	}
	
	public ParserRule getLogicalNegationOperationRule() {
		return getLogicalNegationOperationAccess().getRule();
	}
	
	//EncapsulatedLogicalOperation BooleanOperation:
	//	SimpleBooleanOperation |
	//	'(' LogicalOrOperation ')';
	public DSLGrammarAccess.EncapsulatedLogicalOperationElements getEncapsulatedLogicalOperationAccess() {
		return gaDSL.getEncapsulatedLogicalOperationAccess();
	}
	
	public ParserRule getEncapsulatedLogicalOperationRule() {
		return getEncapsulatedLogicalOperationAccess().getRule();
	}
	
	//SimpleBooleanOperation:
	//	EmptySetOperation | VariableEqualityOperation | VariableInequalityOperation | ElementOfOperation;
	public DSLGrammarAccess.SimpleBooleanOperationElements getSimpleBooleanOperationAccess() {
		return gaDSL.getSimpleBooleanOperationAccess();
	}
	
	public ParserRule getSimpleBooleanOperationRule() {
		return getSimpleBooleanOperationAccess().getRule();
	}
	
	//VariableEqualityOperation:
	//	left=CharacteristicReference "==" right=CharacteristicReference;
	public DSLGrammarAccess.VariableEqualityOperationElements getVariableEqualityOperationAccess() {
		return gaDSL.getVariableEqualityOperationAccess();
	}
	
	public ParserRule getVariableEqualityOperationRule() {
		return getVariableEqualityOperationAccess().getRule();
	}
	
	//VariableInequalityOperation:
	//	left=CharacteristicReference "!=" right=CharacteristicReference;
	public DSLGrammarAccess.VariableInequalityOperationElements getVariableInequalityOperationAccess() {
		return gaDSL.getVariableInequalityOperationAccess();
	}
	
	public ParserRule getVariableInequalityOperationRule() {
		return getVariableInequalityOperationAccess().getRule();
	}
	
	//EmptySetOperation:
	//	"isEmpty" "(" value=CharacteristicSetReference ")";
	public DSLGrammarAccess.EmptySetOperationElements getEmptySetOperationAccess() {
		return gaDSL.getEmptySetOperationAccess();
	}
	
	public ParserRule getEmptySetOperationRule() {
		return getEmptySetOperationAccess().getRule();
	}
	
	//IntersectionOperation:
	//	"intersection" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public DSLGrammarAccess.IntersectionOperationElements getIntersectionOperationAccess() {
		return gaDSL.getIntersectionOperationAccess();
	}
	
	public ParserRule getIntersectionOperationRule() {
		return getIntersectionOperationAccess().getRule();
	}
	
	//UnionOperation:
	//	"union" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public DSLGrammarAccess.UnionOperationElements getUnionOperationAccess() {
		return gaDSL.getUnionOperationAccess();
	}
	
	public ParserRule getUnionOperationRule() {
		return getUnionOperationAccess().getRule();
	}
	
	//SubtractOperation:
	//	"subtract" "(" left=CharacteristicSetReference "," right=CharacteristicSetReference ")";
	public DSLGrammarAccess.SubtractOperationElements getSubtractOperationAccess() {
		return gaDSL.getSubtractOperationAccess();
	}
	
	public ParserRule getSubtractOperationRule() {
		return getSubtractOperationAccess().getRule();
	}
	
	//ElementOfOperation:
	//	"elementOf" "(" left=CharacteristicReference "," right=CharacteristicSetReference ")";
	public DSLGrammarAccess.ElementOfOperationElements getElementOfOperationAccess() {
		return gaDSL.getElementOfOperationAccess();
	}
	
	public ParserRule getElementOfOperationRule() {
		return getElementOfOperationAccess().getRule();
	}
	
	//CreateSetOperation:
	//	"{" value=CharacteristicReference "}";
	public DSLGrammarAccess.CreateSetOperationElements getCreateSetOperationAccess() {
		return gaDSL.getCreateSetOperationAccess();
	}
	
	public ParserRule getCreateSetOperationRule() {
		return getCreateSetOperationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
